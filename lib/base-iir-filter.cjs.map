{"version":3,"file":"base-iir-filter.cjs","sources":["../src/base-iir-filter.js"],"sourcesContent":["// base-iir-filter.js — Common IIR helper (analog prototype -> digital)\n// Author: Davit Akobia <dav.akobia@gmail.com>\n// License: MIT\n\nimport { ComplexNum as C } from './complex.js';\nimport { Util } from './utils.js';\nimport { ZDomain } from './zdomain.js';\n\n/**\n * @typedef {\"lowpass\"|\"highpass\"|\"bandpass\"|\"bandstop\"} FilterKind\n */\n\n/** Helper to convert analog prototype (z,p,k) into digital (b,a) for different kinds */\nexport class BaseIIRFilter {\n  /**\n   * Map normalized lowpass prototype (Ωc=1) to target kind/frequencies,\n   * apply bilinear transform, and normalize digital gain.\n   *\n   * @param {FilterKind} kind\n   * @param {number|number[]} cutoffHz  One freq for LP/HP, [f1,f2] for BP/BS\n   * @param {number} fs\n   * @param {{z:{re:number,im:number}[], p:{re:number,im:number}[], k:number}} proto  analog LP (Ωc=1)\n   * @returns {{b:number[], a:number[], sections: {b:number[], a:[number,number,number]}[] }}\n   */\n  static realize(kind, cutoffHz, fs, proto) {\n    // 1) Prewarp\n    let w1, w2, B, w0;\n    if (kind === 'lowpass' || kind === 'highpass') {\n      w1 = Util.prewarp(/** @type {number} */(cutoffHz), fs);\n    } else {\n      const [f1, f2] = /** @type {[number,number]} */(cutoffHz);\n      w1 = Util.prewarp(f1, fs);\n      w2 = Util.prewarp(f2, fs);\n      B  = w2 - w1;\n      w0 = Math.sqrt(w1 * w2);\n    }\n\n    // 2) Analog frequency mapping (LP prototype -> target kind)\n    const mapLP = (s) => s; // identity\n    const mapHP = (s) => C.div(C.of(w1, 0), s);\n    const mapBP = (s) => {\n      // Bandpass transformation: s -> (s^2 + w0^2) / (B * s)\n      // This transforms each pole/zero s_lp into two poles/zeros\n      \n      if (Math.abs(s.re) < 1e-14 && Math.abs(s.im) < 1e-14) {\n        // Handle s=0 case (zeros at origin in LP)\n        return [C.of(0, w0), C.of(0, -w0)];\n      }\n      \n      // For bandpass: s_new = (B * s_lp ± sqrt((B * s_lp)^2 - 4 * w0^2)) / 2\n      const Bs = C.scale(s, B);\n      const w02 = C.of(w0 * w0, 0);\n      \n      // Calculate discriminant: (B * s_lp)^2 - 4 * w0^2\n      const Bs2 = C.mul(Bs, Bs);\n      const fourW02 = C.scale(w02, 4);\n      const discriminant = C.sub(Bs2, fourW02);\n      const sqrtDisc = ComplexSqrt(discriminant);\n      \n      // Two solutions\n      const s1 = C.scale(C.add(Bs, sqrtDisc), 0.5);\n      const s2 = C.scale(C.sub(Bs, sqrtDisc), 0.5);\n      \n      return [s1, s2];\n    };\n    \n    const mapBS = (s) => {\n      // Bandstop transformation: s -> (B * s) / (s^2 + w0^2)\n      // This transforms each pole/zero s_lp into two poles/zeros\n      \n      if (Math.abs(s.re) < 1e-14 && Math.abs(s.im) < 1e-14) {\n        // Handle s=0 case\n        return [C.of(0, 0), C.of(0, 0)];\n      }\n      \n      // For bandstop: solve s_lp = (B * s) / (s^2 + w0^2)\n      // This gives: s_lp * s^2 - B * s + s_lp * w0^2 = 0\n      const Bs = C.scale(s, B);\n      const sW02 = C.mul(s, C.of(w0 * w0, 0));\n      \n      // Discriminant: B^2 - 4 * s_lp^2 * w0^2\n      const B2 = C.mul(Bs, Bs);\n      const fourSW02 = C.scale(sW02, 4);\n      const discriminant = C.sub(B2, fourSW02);\n      const sqrtDisc = ComplexSqrt(discriminant);\n      \n      // Two solutions\n      const denom = C.scale(s, 2);\n      const s1 = C.div(C.add(Bs, sqrtDisc), denom);\n      const s2 = C.div(C.sub(Bs, sqrtDisc), denom);\n      \n      return [s1, s2];\n    };\n\n    /** @param {{re:number,im:number}} c */\n    function ComplexSqrt(c) {\n      const r = Math.hypot(c.re, c.im);\n      const u = Math.sqrt((r + c.re) / 2);\n      const v = (c.im >= 0 ? 1 : -1) * Math.sqrt((r - c.re) / 2);\n      return { re: u, im: v };\n    }\n\n    /** Solve a*s^2 + b*s + c = 0 (complex) -> two complex roots */\n    function quadRoots(a, b, c) {\n      // s = [-b ± sqrt(b^2 - 4ac)]/(2a)\n      const b2 = C.mul(b, b);\n      const ac4 = C.scale(C.mul(a, c), 4);\n      const disc = C.sub(b2, ac4);\n      const sq = ComplexSqrt(disc);\n      const nb = { re: -b.re, im: -b.im };\n      const den = C.scale(a, 2);\n      const r1 = C.div(C.add(nb, sq), den);\n      const r2 = C.div(C.sub(nb, sq), den);\n      return [r1, r2];\n    }\n\n    // Expand mapped zeros/poles\n    let zA = [];\n    let pA = [];\n\n    const push = (arr, val) => { Array.isArray(val) ? arr.push(...val) : arr.push(val); };\n\n    if (kind === 'lowpass') {\n      for (const s of proto.z) push(zA, C.scale(s, w1));\n      for (const p of proto.p) push(pA, C.scale(p, w1));\n    } else if (kind === 'highpass') {\n      for (const s of proto.z) {\n        if (Math.abs(s.re) < 1e-14 && Math.abs(s.im) < 1e-14) {\n          // skip s=0 to avoid division by zero (it maps to infinity)\n          continue;\n        }\n        push(zA, mapHP(s));\n      }\n      for (const p of proto.p) push(pA, mapHP(p));\n      // Add zeros at s=0 to balance order\n      const extraZeros = Math.max(0, pA.length - zA.length);\n      for (let i = 0; i < extraZeros; i++) zA.push(C.of(0, 0));\n    } else if (kind === 'bandpass') {\n      for (const s of proto.z) push(zA, mapBP(s));\n      for (const p of proto.p) push(pA, mapBP(p));\n      // For bandpass, add zeros at s=0 to maintain proper order\n      // This ensures the filter has the correct number of zeros\n      const orderDiff = pA.length - zA.length;\n      for (let i = 0; i < orderDiff; i++) {\n        zA.push(C.of(0, 0));\n      }\n    } else if (kind === 'bandstop') {\n      for (const s of proto.z) push(zA, mapBS(s));\n      for (const p of proto.p) push(pA, mapBS(p));\n      // For bandstop, add zeros at s = ±j w0 to create symmetric notch\n      // This ensures the filter has zeros at the center frequency\n      const orderDiff = pA.length - zA.length;\n      for (let i = 0; i < orderDiff; i += 2) {\n        zA.push(C.of(0,  w0));\n        zA.push(C.of(0, -w0));\n      }\n      // If odd number of zeros needed, add one more at center\n      if (orderDiff % 2 === 1) {\n        zA.push(C.of(0, 0));\n      }\n    }\n\n    // 3) Bilinear transform to digital\n    const { z, p, k } = Util.bilinearZPK(zA, pA, proto.k || 1, fs);\n    let { b, a } = Util.zpk2tf(z, p, k);\n\n    // 4) Normalize digital gain at a sensible frequency for symmetric response\n    let z0;\n    if (kind === 'lowpass') {\n      z0 = { re: 1, im: 0 }; // DC\n    } else if (kind === 'highpass') {\n      z0 = { re: -1, im: 0 }; // Nyquist\n    } else if (kind === 'bandpass') {\n      // Normalize at center frequency for symmetric bandpass response\n      const f0 = Math.sqrt(/** @type {[number,number]} */(cutoffHz)[0] * /** @type {[number,number]} */(cutoffHz)[1]);\n      const w = 2 * Math.PI * (f0 / fs);\n      z0 = { re: Math.cos(w), im: Math.sin(w) };\n    } else { // bandstop\n      // For bandstop, normalize at center frequency to ensure symmetric notch\n      const f0 = Math.sqrt(/** @type {[number,number]} */(cutoffHz)[0] * /** @type {[number,number]} */(cutoffHz)[1]);\n      const w = 2 * Math.PI * (f0 / fs);\n      z0 = { re: Math.cos(w), im: Math.sin(w) };\n    }\n    // Compute |H(z0)| and scale numerator\n    const H = (() => {\n      let num = { re: 0, im: 0 }, den = { re: 0, im: 0 };\n      let zk = { re: 1, im: 0 };\n      const zinv = { re: z0.re, im: -z0.im };\n      const mul = (x, y) => ({ re: x.re * y.re - x.im * y.im, im: x.re * y.im + x.im * y.re });\n      const add = (x, y) => ({ re: x.re + y.re, im: x.im + y.im });\n      for (let i = 0; i < Math.max(b.length, a.length); i++) {\n        if (i < b.length) num = add(num, { re: zk.re * b[i], im: zk.im * b[i] });\n        if (i < a.length) den = add(den, { re: zk.re * a[i], im: zk.im * a[i] });\n        zk = mul(zk, zinv);\n      }\n      const d = den.re * den.re + den.im * den.im || 1e-300;\n      return Math.hypot((num.re * den.re + num.im * den.im) / d, (num.im * den.re - num.re * den.im) / d);\n    })();\n    if (H > 0) b = b.map(v => v / H);\n\n    return { b, a, sections: [] };\n  }\n}\n\nexport default BaseIIRFilter;\n"],"names":["Util","C"],"mappings":"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"}