{"version":3,"file":"butterworth-filter.cjs","sources":["../src/butterworth-filter.js"],"sourcesContent":["// butterworth-filter.js â€” Butterworth IIR design via analog prototype + bilinear\n// Author: Davit Akobia <dav.akobia@gmail.com>\n// License: MIT\n\nimport { ComplexNum as C } from './complex.js';\nimport { BaseIIRFilter } from './base-iir-filter.js';\n\n/**\n * @typedef {\"lowpass\"|\"highpass\"|\"bandpass\"|\"bandstop\"} FilterKind\n */\nexport class ButterworthFilter {\n  /**\n   * @param {FilterKind} kind\n   * @param {number|number[]} cutoffHz\n   * @param {number} fs\n   * @param {number} order\n   */\n  static design(kind, cutoffHz, fs, order = 4) {\n    if (order < 1) throw new Error('Butterworth order must be >= 1');\n    // Normalized LP poles on unit circle in left-half plane\n    const p = [];\n    for (let k = 1; k <= order; k++) {\n      const theta = Math.PI * (2 * k - 1) / (2 * order);\n      p.push({ re: -Math.sin(theta), im:  Math.cos(theta) });\n    }\n    const z = []; // no finite zeros\n    const k = 1;\n    return BaseIIRFilter.realize(kind, cutoffHz, fs, { z, p, k });\n  }\n}\nexport default ButterworthFilter;\n"],"names":["BaseIIRFilter"],"mappings":";;;;;;;;AAAA;AACA;AACA;;;AAKA;AACA;AACA;AACO,MAAM,iBAAiB,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,KAAK,GAAG,CAAC,EAAE;AAC/C,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC;AACpE;AACA,IAAI,MAAM,CAAC,GAAG,EAAE;AAChB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,EAAE,EAAE;AACrC,MAAM,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;AACvD,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;AAC5D,IAAI;AACJ,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;AACjB,IAAI,MAAM,CAAC,GAAG,CAAC;AACf,IAAI,OAAOA,2BAAa,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACjE,EAAE;AACF;;;;;"}