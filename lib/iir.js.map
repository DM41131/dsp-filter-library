{"version":3,"file":"iir.js","sources":["../src/iir.js"],"sourcesContent":["// iir.js — Infinite Impulse Response filter design\r\n// Author: Davit Akobia <dav.akobia@gmail.com>\r\n// License: MIT\r\n\r\nimport { ComplexNum as C } from './complex.js';\r\nimport { Util } from './utils.js';\r\nimport { FIRDesigner } from './fir.js';\r\n\r\n/**\r\n * @typedef {\"lowpass\"|\"highpass\"|\"bandpass\"|\"bandstop\"} FiltKind\r\n * @typedef {{b:number[], a:[number, number, number]}} Biquad // a = [1,a1,a2] (digital biquad)\r\n */\r\n\r\nexport class Bilinear {\r\n  /** Prewarp digital edge f(Hz) -> analog Ω (rad/s) for bilinear transform */\r\n  static prewarp(fHz, fs) {\r\n    return 2 * fs * Math.tan(Math.PI * fHz / fs);\r\n  }\r\n}\r\n\r\n/**\r\n * IIR filter designer (Butterworth, Chebyshev-I, Chebyshev-II, Linkwitz–Riley)\r\n *\r\n * Notes:\r\n * - High-pass is produced by the *analog* LP→HP transform (s → Ωc/s) before bilinear.\r\n * - Chebyshev-II interprets `cutoffHz` as the **stopband edge** (first frequency reaching `rs` dB).\r\n * - After bilinear we normalize once at z=1 (LP) or z=−1 (HP); the gain is applied to the last SOS\r\n *   for better numeric conditioning.\r\n * - Bandpass/Bandstop currently use FIR fallback (keeps API stable; can be upgraded later).\r\n */\r\nexport class IIRDesigner {\r\n  // ----------------------------- Prototype Poles -----------------------------\r\n\r\n  /** Normalized (Ωp = 1) Butterworth poles in LHP */\r\n  static butterworthPoles(n) {\r\n    const poles = [];\r\n    for (let k = 0; k < n; k++) {\r\n      const theta = Math.PI * (2 * k + 1 + n) / (2 * n);\r\n      const p = C.of(Math.cos(theta), Math.sin(theta));\r\n      if (p.re < 0) poles.push(p);\r\n    }\r\n    return poles;\r\n  }\r\n\r\n  /** Normalized (Ωp = 1) Chebyshev-I poles in LHP, rp = passband ripple (dB) */\r\n  static cheby1Poles(n, rp = 1) {\r\n    const eps = Math.sqrt(Math.pow(10, rp / 10) - 1);\r\n    const alpha = Math.asinh(1 / eps) / n;\r\n    const sinhA = Math.sinh(alpha), coshA = Math.cosh(alpha);\r\n    const poles = [];\r\n    for (let k = 0; k < n; k++) {\r\n      const theta = Math.PI * (2 * k + 1) / (2 * n);\r\n      const re = -sinhA * Math.sin(theta);\r\n      const im =  coshA * Math.cos(theta);\r\n      const p = C.of(re, im);\r\n      if (p.re < 0) poles.push(p);\r\n    }\r\n    return poles;\r\n  }\r\n\r\n  /**\r\n   * Chebyshev-II (inverse Chebyshev) LP prototype with Ωs = 1:\r\n   * returns LHP poles and positive zero frequencies (Ωz) on the jΩ axis.\r\n   * rs: stopband attenuation in dB (e.g., 40).\r\n   */\r\n  static cheby2PolesAndZeros(n, rs) {\r\n    // R = 1/ε, where ε is the inverse-Chebyshev stopband ripple parameter\r\n    const R = Math.sqrt(Math.pow(10, rs / 10) - 1);\r\n    const mu = Math.asinh(R) / n;\r\n    const sinhM = Math.sinh(mu), coshM = Math.cosh(mu);\r\n\r\n    const poles = [];\r\n    for (let k = 1; k <= n; k++) {\r\n      const theta = Math.PI * (2 * k - 1) / (2 * n);\r\n      const re = -sinhM * Math.sin(theta);\r\n      const im =  coshM * Math.cos(theta);\r\n      if (re < 0) poles.push(C.of(re, im));\r\n    }\r\n\r\n    // floor(n/2) finite zero pairs at Ωz = sec(theta_k)\r\n    const zerosW = [];\r\n    const m = Math.floor(n / 2);\r\n    for (let k = 1; k <= m; k++) {\r\n      const theta = Math.PI * (2 * k - 1) / (2 * n);\r\n      zerosW.push(1 / Math.cos(theta)); // sec(theta)\r\n    }\r\n\r\n    return { poles, zerosW };\r\n  }\r\n\r\n  // ----------------------------- Helpers ------------------------------------\r\n\r\n  /** Pair conjugates for SOS construction */\r\n  static pairConjugates(list) {\r\n    const used = new Array(list.length).fill(false);\r\n    const out = [];\r\n    for (let i = 0; i < list.length; i++) {\r\n      if (used[i]) continue;\r\n      const p = list[i];\r\n      let pair = -1;\r\n      for (let j = i + 1; j < list.length; j++) {\r\n        if (used[j]) continue;\r\n        const q = list[j];\r\n        if (Math.abs(p.re - q.re) < 1e-12 && Math.abs(p.im + q.im) < 1e-12) { pair = j; break; }\r\n      }\r\n      if (pair >= 0) { out.push([p, list[pair]]); used[i] = used[pair] = true; }\r\n      else { out.push([p]); used[i] = true; }\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Analog biquad → digital biquad via bilinear (Tustin).\r\n   * (b2 s^2 + b1 s + b0) / (a2 s^2 + a1 s + a0), with s = K (1 − z⁻¹)/(1 + z⁻¹), K = 2fs.\r\n   */\r\n  static bilinearMapBiquad(b2, b1, b0, a2, a1, a0, fs) {\r\n    const K = 2 * fs;\r\n\r\n    const B0 = b2 * K * K + b1 * K + b0;\r\n    const B1 = 2 * (b0 - b2 * K * K);\r\n    const B2 = b2 * K * K - b1 * K + b0;\r\n\r\n    const A0 = a2 * K * K + a1 * K + a0;\r\n    const A1 = 2 * (a0 - a2 * K * K);\r\n    const A2 = a2 * K * K - a1 * K + a0;\r\n\r\n    return { b: [B0 / A0, B1 / A0, B2 / A0], a: [1, A1 / A0, A2 / A0] };\r\n  }\r\n\r\n  /** Evaluate H(z) at a single z0 on the unit circle from direct-form coeffs. */\r\n  static _evalHzAtZ(b, a, z0) {\r\n    const num = b.reduce((acc, bi, i) => acc + bi * Math.pow(z0, -i), 0);\r\n    const den = a.reduce((acc, ai, i) => acc + ai * Math.pow(z0, -i), 0);\r\n    return num / den;\r\n  }\r\n\r\n  /**\r\n   * Build LP/HP from normalized prototype poles using proper analog transforms,\r\n   * then bilinear; normalize digitally at z0 (DC for LP, Nyquist for HP).\r\n   */\r\n  static fromPrototype(kind, fs, polesNorm, normalizeAt, wc) {\r\n    /** @type {Biquad[]} */\r\n    const sections = [];\r\n\r\n    const pairs = IIRDesigner.pairConjugates(polesNorm);\r\n    for (const pair of pairs) {\r\n      const [p1, p2] = pair.length === 2 ? pair : [pair[0], null];\r\n\r\n      // LP (Ωp=1) quadratic\r\n      let a2_lp, a1_lp, a0_lp;\r\n      if (p2) {\r\n        a2_lp = 1;\r\n        a1_lp = -2 * p1.re;\r\n        a0_lp = p1.re * p1.re + p1.im * p1.im;\r\n      } else {\r\n        a2_lp = 0; a1_lp = 1; a0_lp = -p1.re;\r\n      }\r\n\r\n      // Transform to analog LP/HP at Ωc = wc\r\n      let A2, A1, A0; // denom\r\n      let b2, b1, b0; // numer\r\n\r\n      if (kind === 'lowpass') {\r\n        A2 = a2_lp;\r\n        A1 = a1_lp * wc;\r\n        A0 = a0_lp * wc * wc;\r\n        b2 = 0; b1 = 0; b0 = 1;              // constant numerator (LP)\r\n      } else if (kind === 'highpass') {\r\n        // s → Ωc/s\r\n        if (a2_lp !== 0) {\r\n          // second-order: a0 s^2 + a1 Ωc s + a2 Ωc^2\r\n          A2 = a0_lp;\r\n          A1 = a1_lp * wc;\r\n          A0 = a2_lp * wc * wc;\r\n          b2 = 1; b1 = 0; b0 = 0;            // s^2 ⇒ double zero at DC\r\n        } else {\r\n          // first-order: a0 s + a1 Ωc\r\n          A2 = 0;\r\n          A1 = a0_lp;\r\n          A0 = a1_lp * wc;\r\n          b2 = 0; b1 = 1; b0 = 0;            // s ⇒ single zero at DC\r\n        }\r\n      } else {\r\n        throw new Error('fromPrototype supports only lowpass/highpass');\r\n      }\r\n\r\n      sections.push(IIRDesigner.bilinearMapBiquad(b2, b1, b0, A2, A1, A0, fs));\r\n    }\r\n\r\n    // Compose polynomials, then digital normalization at z0.\r\n    let bPoly = [1], aPoly = [1];\r\n    for (const s of sections) { bPoly = Util.polymul(bPoly, s.b); aPoly = Util.polymul(aPoly, s.a); }\r\n\r\n    const g = 1 / IIRDesigner._evalHzAtZ(bPoly, aPoly, normalizeAt);\r\n    if (sections.length > 0) {\r\n      // Apply to the LAST section for better conditioning\r\n      const last = sections.length - 1;\r\n      sections[last].b = sections[last].b.map(v => v * g);\r\n    }\r\n\r\n    // Recompute polynomials after gain distribution\r\n    bPoly = [1]; aPoly = [1];\r\n    for (const s of sections) { bPoly = Util.polymul(bPoly, s.b); aPoly = Util.polymul(aPoly, s.a); }\r\n\r\n    return { b: bPoly, a: aPoly, sections };\r\n  }\r\n\r\n  // ----------------------------- Public Designers ---------------------------\r\n\r\n  /** Butterworth (LP/HP); BP/BS via FIR fallback */\r\n  static butterworth(kind, cutoffHz, fs, order) {\r\n    if (order < 1) throw new Error('Order must be >= 1');\r\n\r\n    if (kind === 'lowpass' || kind === 'highpass') {\r\n      const fc = /** @type {number} */ (cutoffHz);\r\n      const wc = Bilinear.prewarp(fc, fs);\r\n      const polesNorm = IIRDesigner.butterworthPoles(order);\r\n      const zNorm = (kind === 'lowpass') ? 1 : -1;\r\n      const tf = IIRDesigner.fromPrototype(kind, fs, polesNorm, zNorm, wc);\r\n      return { b: tf.b, a: tf.a, sections: tf.sections };\r\n    }\r\n\r\n    if (kind === 'bandpass' || kind === 'bandstop') {\r\n      const [f1, f2] = /** @type {[number, number]} */ (cutoffHz);\r\n      if (!(f1 > 0 && f2 > f1 && f2 < fs / 2)) throw new Error('Invalid band edges');\r\n      const orderFIR = Math.max(64, order * 8);\r\n      const tf = FIRDesigner.design(kind, [f1, f2], fs, orderFIR, 'hamming');\r\n      return { b: tf.b, a: tf.a, sections: [] };\r\n    }\r\n\r\n    throw new Error('Unsupported IIR kind');\r\n  }\r\n\r\n  /** Chebyshev-I (LP/HP); BP/BS via FIR fallback */\r\n  static cheby1(kind, cutoffHz, fs, order, rp = 1) {\r\n    if (order < 1) throw new Error('Order must be >= 1');\r\n\r\n    if (kind === 'lowpass' || kind === 'highpass') {\r\n      const fc = /** @type {number} */ (cutoffHz);\r\n      const wc = Bilinear.prewarp(fc, fs);\r\n      const polesNorm = IIRDesigner.cheby1Poles(order, rp);\r\n      const zNorm = (kind === 'lowpass') ? 1 : -1;\r\n      const tf = IIRDesigner.fromPrototype(kind, fs, polesNorm, zNorm, wc);\r\n      return { b: tf.b, a: tf.a, sections: tf.sections };\r\n    }\r\n\r\n    if (kind === 'bandpass' || kind === 'bandstop') {\r\n      const [f1, f2] = /** @type {[number, number]} */ (cutoffHz);\r\n      if (!(f1 > 0 && f2 > f1 && f2 < fs / 2)) throw new Error('Invalid band edges');\r\n      const orderFIR = Math.max(64, order * 8);\r\n      const tf = FIRDesigner.design(kind, [f1, f2], fs, orderFIR, 'hamming');\r\n      return { b: tf.b, a: tf.a, sections: [] };\r\n    }\r\n\r\n    throw new Error('Unsupported IIR kind');\r\n  }\r\n\r\n  /**\r\n   * Chebyshev-II (inverse Chebyshev) — **Lowpass only** here.\r\n   * `cutoffHz` is interpreted as the **stopband edge** (first frequency where attenuation reaches `rs` dB).\r\n   * Other kinds currently fallback to FIR.\r\n   */\r\n  static cheby2(kind, cutoffHz, fs, order, rs = 40) {\r\n    if (order < 1) throw new Error('Order must be >= 1');\r\n\r\n    if (kind !== 'lowpass') {\r\n      const orderFIR = Math.max(64, order * 8);\r\n      const tf = FIRDesigner.design(kind, cutoffHz, fs, orderFIR, 'hamming');\r\n      return { b: tf.b, a: tf.a, sections: [] };\r\n    }\r\n\r\n    // 1) Prototype with Ωs = 1, then scale by Ωs = prewarp(f_stop)\r\n    const fStop = /** @type {number} */ (cutoffHz);\r\n    const ws = Bilinear.prewarp(fStop, fs);\r\n\r\n    const { poles, zerosW } = IIRDesigner.cheby2PolesAndZeros(order, rs);\r\n\r\n    // Scale prototype poles and zeros by Ωs\r\n    const P = poles.map(p => C.of(p.re * ws, p.im * ws)); // analog poles\r\n    const Z = zerosW.map(wz => ws * wz);                  // analog zero freqs (±jΩz)\r\n\r\n    // 2) Build analog second-order sections; track DC numer/denom for analog gain\r\n    const pairs = IIRDesigner.pairConjugates(P);\r\n    const analogSecs = [];\r\n    const numDCs = [];\r\n    const denDCs = [];\r\n    let zi = 0;\r\n\r\n    for (const pair of pairs) {\r\n      const [p1, p2] = pair.length === 2 ? pair : [pair[0], null];\r\n\r\n      if (p2) {\r\n        // Denominator: (s − p)(s − p*) = s^2 − 2Re(p) s + |p|^2\r\n        const a2 = 1;\r\n        const a1 = -2 * p1.re;\r\n        const a0 = p1.re * p1.re + p1.im * p1.im;\r\n\r\n        // Numerator: with a zero pair at ±jΩz if available, else constant (all-pole)\r\n        let b2, b1, b0;\r\n        if (zi < Z.length) {\r\n          const wz = Z[zi++];\r\n          b2 = 1; b1 = 0; b0 = wz * wz; // (s^2 + Ωz^2)\r\n        } else {\r\n          b2 = 0; b1 = 0; b0 = 1;\r\n        }\r\n\r\n        analogSecs.push({ b2, b1, b0, a2, a1, a0 });\r\n        numDCs.push(b0);\r\n        denDCs.push(a0);\r\n      } else {\r\n        // First-order section: a1 s + a0, numerator constant\r\n        const a2 = 0, a1 = 1, a0 = -p1.re;\r\n        const b2 = 0, b1 = 0, b0 = 1;\r\n        analogSecs.push({ b2, b1, b0, a2, a1, a0 });\r\n        numDCs.push(1);\r\n        denDCs.push(a0);\r\n      }\r\n    }\r\n\r\n    // 3) Force analog DC gain to 1: G = Π a0_k / Π b0_k (apply to LAST section)\r\n    const prod = (arr) => arr.reduce((acc, v) => acc * v, 1);\r\n    const G = prod(denDCs) / prod(numDCs);\r\n    if (analogSecs.length > 0) {\r\n      const last = analogSecs.length - 1;\r\n      analogSecs[last].b2 *= G;\r\n      analogSecs[last].b1 *= G;\r\n      analogSecs[last].b0 *= G;\r\n    }\r\n\r\n    // 4) Bilinear-map each analog section\r\n    /** @type {Biquad[]} */\r\n    const sections = analogSecs.map(s =>\r\n      IIRDesigner.bilinearMapBiquad(s.b2, s.b1, s.b0, s.a2, s.a1, s.a0, fs)\r\n    );\r\n\r\n    // 5) Compose → final b,a (a0 should be 1)\r\n    let b = [1], a = [1];\r\n    for (const s of sections) { b = Util.polymul(b, s.b); a = Util.polymul(a, s.a); }\r\n\r\n    // 6) Digital DC normalization (should already be ~1, but keep it exact)\r\n    const gDig = 1 / IIRDesigner._evalHzAtZ(b, a, 1);\r\n    if (sections.length > 0) {\r\n      const last = sections.length - 1;\r\n      sections[last].b = sections[last].b.map(v => v * gDig);\r\n    }\r\n    b = [1]; a = [1];\r\n    for (const s of sections) { b = Util.polymul(b, s.b); a = Util.polymul(a, s.a); }\r\n\r\n    return { b, a, sections };\r\n  }\r\n\r\n  /**\r\n   * Linkwitz–Riley (even order only): cascade of two same-order Butterworth filters.\r\n   * Example: order=4 → two 2nd-order Butterworths cascaded.\r\n   */\r\n  static linkwitzRiley(kind, cutoffHz, fs, orderEven = 4) {\r\n    if (orderEven < 2) throw new Error('Order must be >= 2');\r\n    const even = (orderEven % 2 === 0) ? orderEven : (orderEven + 1);\r\n    const half = even / 2;\r\n\r\n    const base = IIRDesigner.butterworth(kind, cutoffHz, fs, half);\r\n    const sections = base.sections.concat(base.sections.map(s => ({ b: s.b.slice(), a: s.a.slice() })));\r\n    const b = Util.polymul(base.b, base.b);\r\n    const a = Util.polymul(base.a, base.a);\r\n    return { b, a, sections };\r\n  }\r\n}\r\n"],"names":["C"],"mappings":"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"}