{"version":3,"file":"iir.js","sources":["../src/iir.js"],"sourcesContent":["// iir.js — Infinite Impulse Response filter design\r\n// License: MIT\r\n\r\nimport { ComplexNum as C } from './complex.js';\r\nimport { Util } from './utils.js';\r\nimport { FIRDesigner } from './fir.js';\r\n\r\n/**\r\n * @typedef {\"lowpass\"|\"highpass\"|\"bandpass\"|\"bandstop\"} FiltKind\r\n * @typedef {{b:number[], a:[number, number, number]}} Biquad // a = [1,a1,a2]\r\n */\r\n\r\n/**\r\n * Bilinear transformation utilities\r\n */\r\nexport class Bilinear {\r\n    /** prewarp digital edge f(Hz) -> analog Ω(rad/s) */\r\n    static prewarp(fHz, fs) { \r\n        return 2 * fs * Math.tan(Math.PI * fHz / fs); \r\n    }\r\n}\r\n\r\n/**\r\n * IIR filter designer (Butterworth & Chebyshev I)\r\n */\r\nexport class IIRDesigner {\r\n    // ---- Butterworth poles (normalized) ----\r\n    static butterworthPoles(n) {\r\n        const poles = [];\r\n        for (let k = 0; k < n; k++) {\r\n            const theta = Math.PI * (2*k + 1 + n) / (2*n);\r\n            const p = C.of(Math.cos(theta), Math.sin(theta));\r\n            if (p.re < 0) poles.push(p);\r\n        }\r\n        return poles;\r\n    }\r\n\r\n    // ---- Chebyshev I poles (normalized), rp in dB ----\r\n    static cheby1Poles(n, rp = 1) {\r\n        const eps = Math.sqrt(Math.pow(10, rp / 10) - 1);\r\n        const asinh = (x) => Math.log(x + Math.sqrt(x*x + 1));\r\n        const alpha = asinh(1/eps) / n;\r\n        const sinhA = Math.sinh(alpha), coshA = Math.cosh(alpha);\r\n        const poles = [];\r\n        for (let k = 0; k < n; k++) {\r\n            const theta = Math.PI * (2*k + 1) / (2*n);\r\n            const re = -sinhA * Math.sin(theta);\r\n            const im =  coshA * Math.cos(theta);\r\n            const p = C.of(re, im);\r\n            if (p.re < 0) poles.push(p);\r\n        }\r\n        return poles;\r\n    }\r\n\r\n    static pairConjugates(list) {\r\n        const used = new Array(list.length).fill(false);\r\n        const out = [];\r\n        for (let i = 0; i < list.length; i++) {\r\n            if (used[i]) continue;\r\n            const p = list[i];\r\n            let pair = -1;\r\n            for (let j = i + 1; j < list.length; j++) {\r\n                if (used[j]) continue;\r\n                const q = list[j];\r\n                if (Math.abs(p.re - q.re) < 1e-12 && Math.abs(p.im + q.im) < 1e-12) { \r\n                    pair = j; \r\n                    break; \r\n                }\r\n            }\r\n            if (pair >= 0) { \r\n                out.push([p, list[pair]]); \r\n                used[i] = used[pair] = true; \r\n            }\r\n            else { \r\n                out.push([p]); \r\n                used[i] = true; \r\n            }\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /** Build digital biquad from analog a2 s^2 + a1 s + a0 via bilinear; numerator shaped by kind (LP/HP). */\r\n    static bilinearBiquad(a2, a1, a0, kind, fs) {\r\n        const T = 1 / fs;\r\n        const K = 2 / T;\r\n        // Denominator mapping\r\n        const d0 = a2*K*K + a1*K + a0;\r\n        const d1 = -2*a2*K*K + 2*a0;\r\n        const d2 = a2*K*K - a1*K + a0;\r\n        /** @type {[number,number,number]} */ const a = [1, d1/d0, d2/d0];\r\n\r\n        // Numerator prototype (cascaded then globally normalized)\r\n        let b;\r\n        if (kind === 'lowpass') b = [1, 2, 1];\r\n        else if (kind === 'highpass') b = [1, -2, 1];\r\n        else b = [1, 0, -1]; // not used (BP/BS via FIR fallback)\r\n        return { b, a };\r\n    }\r\n\r\n    /** Convert poles -> cascade of biquads (SOS), then polynomial and global gain normalization. */\r\n    static fromPrototype(kind, fs, poles, normalizeAt /* 1| -1 */) {\r\n        /** @type {Biquad[]} */\r\n        const sections = [];\r\n\r\n        const pairs = IIRDesigner.pairConjugates(poles);\r\n        for (const pair of pairs) {\r\n            const [p1, p2] = pair.length === 2 ? pair : [pair[0], null];\r\n            // Analog quadratic a2 s^2 + a1 s + a0\r\n            let a2, a1, a0;\r\n            if (p2) {\r\n                const Re2 = -2 * p1.re; // (s - p)(s - p*) = s^2 - 2Re(p)s + |p|^2\r\n                const mag2 = p1.re*p1.re + p1.im*p1.im;\r\n                a2 = 1; a1 = Re2; a0 = mag2;\r\n            } else {\r\n                // single pole (odd order)\r\n                a2 = 0; a1 = 1; a0 = -p1.re;\r\n            }\r\n            sections.push(IIRDesigner.bilinearBiquad(a2, a1, a0, kind, fs));\r\n        }\r\n\r\n        // Build overall polynomials (for compatibility) & normalize global gain\r\n        let bPoly = [1], aPoly = [1];\r\n        for (const s of sections) {\r\n            bPoly = Util.polymul(bPoly, s.b);\r\n            aPoly = Util.polymul(aPoly, s.a);\r\n        }\r\n        const evalHzAtZ = (b, a, z0) => {\r\n            const num = b.reduce((acc, bi, i) => acc + bi * Math.pow(z0, -i), 0);\r\n            const den = a.reduce((acc, ai, i) => acc + ai * Math.pow(z0, -i), 0);\r\n            return num / den;\r\n        };\r\n        const z0 = normalizeAt;\r\n        const g = 1 / evalHzAtZ(bPoly, aPoly, z0);\r\n        bPoly = bPoly.map(v => v * g);\r\n        for (const s of sections) s.b = s.b.map(v => v * g); // distribute gain across first section is typical; here we scale all equally\r\n        // normalize a[0] = 1\r\n        const gain = aPoly[0];\r\n        if (Math.abs(gain - 1) > 1e-14) {\r\n            bPoly = bPoly.map(v => v / gain);\r\n            aPoly = aPoly.map(v => v / gain);\r\n            for (const s of sections) {\r\n                s.b = s.b.map(v => v / gain);\r\n                s.a = [1, s.a[1]/gain, s.a[2]/gain];\r\n            }\r\n        }\r\n\r\n        return { b: bPoly, a: aPoly, sections };\r\n    }\r\n\r\n    /** Butterworth (LP/HP); BP/BS -> FIR fallback */\r\n    static butterworth(kind, cutoffHz, fs, order) {\r\n        if (order < 1) throw new Error('Order must be >= 1');\r\n        if (kind === 'lowpass' || kind === 'highpass') {\r\n            const fc = /** @type {number} */(cutoffHz);\r\n            const pre = Bilinear.prewarp(fc, fs);\r\n            const poles = IIRDesigner.butterworthPoles(order).map(p => C.scale(p, pre));\r\n            const normZ = (kind === 'lowpass') ? 1 : -1;\r\n            const tf = IIRDesigner.fromPrototype(kind, fs, poles, normZ);\r\n            return { b: tf.b, a: tf.a, sections: tf.sections };\r\n        }\r\n        if (kind === 'bandpass' || kind === 'bandstop') {\r\n            const [f1, f2] = /** @type {[number,number]} */(cutoffHz);\r\n            if (!(f1 > 0 && f2 > f1 && f2 < fs/2)) throw new Error('Invalid band edges');\r\n            const orderFIR = Math.max(64, order * 8);\r\n            const tf = FIRDesigner.design(kind, [f1, f2], fs, orderFIR, 'hamming');\r\n            return { b: tf.b, a: tf.a, sections: [] }; // FIR\r\n        }\r\n        throw new Error('Unsupported IIR kind');\r\n    }\r\n\r\n    /** Chebyshev Type I (LP/HP); BP/BS -> FIR fallback */\r\n    static cheby1(kind, cutoffHz, fs, order, rp = 1) {\r\n        if (order < 1) throw new Error('Order must be >= 1');\r\n        if (kind === 'lowpass' || kind === 'highpass') {\r\n            const fc = /** @type {number} */(cutoffHz);\r\n            const pre = Bilinear.prewarp(fc, fs);\r\n            const poles = IIRDesigner.cheby1Poles(order, rp).map(p => C.scale(p, pre));\r\n            const normZ = (kind === 'lowpass') ? 1 : -1;\r\n            const tf = IIRDesigner.fromPrototype(kind, fs, poles, normZ);\r\n            return { b: tf.b, a: tf.a, sections: tf.sections };\r\n        }\r\n        if (kind === 'bandpass' || kind === 'bandstop') {\r\n            const [f1, f2] = /** @type {[number,number]} */(cutoffHz);\r\n            if (!(f1 > 0 && f2 > f1 && f2 < fs/2)) throw new Error('Invalid band edges');\r\n            const orderFIR = Math.max(64, order * 8);\r\n            const tf = FIRDesigner.design(kind, [f1, f2], fs, orderFIR, 'hamming');\r\n            return { b: tf.b, a: tf.a, sections: [] };\r\n        }\r\n        throw new Error('Unsupported IIR kind');\r\n    }\r\n}\r\n"],"names":["C"],"mappings":"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"}