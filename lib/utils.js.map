{"version":3,"file":"utils.js","sources":["../src/utils.js"],"sourcesContent":["// utils.js — Mathematical utilities for DSP\r\n// Author: Davit Akobia <dav.akobia@gmail.com>\r\n// License: MIT\r\n\r\nimport { ComplexNum as C } from './complex.js';\r\n\r\n/**\r\n * Utility functions for digital signal processing\r\n */\r\nexport class Util {\r\n  /**\r\n   * Next power of 2 >= n.\r\n   * Uses multiplication to avoid 32-bit overflow from bit shifts.\r\n   */\r\n  static nextPow2(n) {\r\n    if (!Number.isFinite(n) || n <= 1) return 1;\r\n    let p = 1;\r\n    while (p < n) p *= 2;\r\n    return p;\r\n  }\r\n\r\n\r\n  /**\r\n   * Inclusive linspace from start to end with n points.\r\n   * n <= 0 → []\r\n   * n = 1 → [start]\r\n   */\r\n  static linspace(start, end, n) {\r\n    if (n <= 0) return [];\r\n    if (n === 1) return [start];\r\n    const step = (end - start) / (n - 1);\r\n    return Array.from({ length: n }, (_, i) => start + i * step);\r\n  }\r\n\r\n\r\n  /** Naive linear convolution (length x+h-1). */\r\n  static convolve(x, h) {\r\n    const y = new Array(x.length + h.length - 1).fill(0);\r\n    for (let i = 0; i < x.length; i++) {\r\n      const xi = x[i];\r\n      for (let j = 0; j < h.length; j++) y[i + j] += xi * h[j];\r\n    }\r\n    return y;\r\n  }\r\n\r\n  /** Real-coefficient polynomial multiplication. */\r\n  static polymul(a, b) {\r\n    const na = a.length, nb = b.length;\r\n    const r = new Array(na + nb - 1).fill(0);\r\n    for (let i = 0; i < na; i++)\r\n      for (let j = 0; j < nb; j++)\r\n        r[i + j] += a[i] * b[j];\r\n    return r;\r\n  }\r\n\r\n  /** Real-coefficient polynomial addition. */\r\n  static polyadd(a, b) {\r\n    const maxLen = Math.max(a.length, b.length);\r\n    const result = new Array(maxLen).fill(0);\r\n    for (let i = 0; i < maxLen; i++) {\r\n      if (i < a.length) result[i] += a[i];\r\n      if (i < b.length) result[i] += b[i];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Build a real-coefficient polynomial from (possibly complex) roots.\r\n   * - Real roots contribute (x - r).\r\n   * - Complex roots contribute (x^2 - 2 Re(r) x + |r|^2).\r\n   * Robust to missing explicit conjugate: if a root has non-negligible\r\n   * imaginary part but no partner is found, we still multiply by its\r\n   * implied conjugate's quadratic.\r\n   */\r\n  static polyfromroots(roots, tol = 1e-12) {\r\n    const used = new Array(roots.length).fill(false);\r\n    let p = [1];\r\n\r\n    for (let i = 0; i < roots.length; i++) {\r\n      if (used[i]) continue;\r\n      const r = roots[i];\r\n\r\n      // Try to find its conjugate partner\r\n      let pair = -1;\r\n      for (let j = i + 1; j < roots.length; j++) {\r\n        if (used[j]) continue;\r\n        const s = roots[j];\r\n        if (Math.abs(r.re - s.re) < tol && Math.abs(r.im + s.im) < tol) {\r\n          pair = j; break;\r\n        }\r\n      }\r\n\r\n      if (Math.abs(r.im) < 1e-14) {\r\n        // Real root\r\n        p = Util.polymul(p, [1, -r.re]);\r\n        used[i] = true;\r\n      } else if (pair >= 0) {\r\n        // Found explicit conjugate\r\n        const a2 = [1, -2 * r.re, r.re * r.re + r.im * r.im];\r\n        p = Util.polymul(p, a2);\r\n        used[i] = used[pair] = true;\r\n      } else {\r\n        // No explicit partner — multiply by the quadratic implied by conjugation\r\n        const a2 = [1, -2 * r.re, r.re * r.re + r.im * r.im];\r\n        p = Util.polymul(p, a2);\r\n        used[i] = true;\r\n      }\r\n    }\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Prewarp digital edge frequency to analog frequency for bilinear transform\r\n   * @param {number} fHz - Digital frequency in Hz\r\n   * @param {number} fs - Sampling frequency in Hz\r\n   * @returns {number} Analog frequency in rad/s\r\n   */\r\n  static prewarp(fHz, fs) {\r\n    return 2 * fs * Math.tan(Math.PI * fHz / fs);\r\n  }\r\n\r\n  /**\r\n   * Pairs conjugate poles for SOS construction\r\n   * @param {C[]} list - List of complex numbers\r\n   * @returns {C[][]} Array of pole pairs\r\n   */\r\n  static pairConjugates(list) {\r\n    const used = new Array(list.length).fill(false);\r\n    const out = [];\r\n    for (let i = 0; i < list.length; i++) {\r\n      if (used[i]) continue;\r\n      const p = list[i];\r\n      let pair = -1;\r\n      for (let j = i + 1; j < list.length; j++) {\r\n        if (used[j]) continue;\r\n        const q = list[j];\r\n        if (Math.abs(p.re - q.re) < 1e-12 && Math.abs(p.im + q.im) < 1e-12) { \r\n          pair = j; \r\n          break; \r\n        }\r\n      }\r\n      if (pair >= 0) { \r\n        out.push([p, list[pair]]); \r\n        used[i] = used[pair] = true; \r\n      } else { \r\n        out.push([p]); \r\n        used[i] = true; \r\n      }\r\n    }\r\n    return out;\r\n  }\r\n\r\n  /**\r\n   * Maps analog biquad to digital biquad via bilinear transform\r\n   * @param {number} b2 - Numerator s^2 coefficient\r\n   * @param {number} b1 - Numerator s coefficient\r\n   * @param {number} b0 - Numerator constant\r\n   * @param {number} a2 - Denominator s^2 coefficient\r\n   * @param {number} a1 - Denominator s coefficient\r\n   * @param {number} a0 - Denominator constant\r\n   * @param {number} fs - Sampling frequency\r\n   * @returns {{b: [number, number, number], a: [number, number, number]}} Digital biquad coefficients\r\n   */\r\n  static bilinearMapBiquad(b2, b1, b0, a2, a1, a0, fs) {\r\n    const K = 2 * fs;\r\n\r\n    const B0 = b2 * K * K + b1 * K + b0;\r\n    const B1 = 2 * (b0 - b2 * K * K);\r\n    const B2 = b2 * K * K - b1 * K + b0;\r\n\r\n    const A0 = a2 * K * K + a1 * K + a0;\r\n    const A1 = 2 * (a0 - a2 * K * K);\r\n    const A2 = a2 * K * K - a1 * K + a0;\r\n\r\n    return {\r\n      b: [B0 / A0, B1 / A0, B2 / A0],\r\n      a: [1, A1 / A0, A2 / A0]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Evaluates transfer function H(z) at a real z0\r\n   * @param {number[]} b - Numerator coefficients\r\n   * @param {number[]} a - Denominator coefficients\r\n   * @param {number} z0 - Real z value\r\n   * @returns {number} Transfer function value\r\n   */\r\n  static evalHzAtZ(b, a, z0) {\r\n    const num = b.reduce((acc, bi, i) => acc + bi * Math.pow(z0, -i), 0);\r\n    const den = a.reduce((acc, ai, i) => acc + ai * Math.pow(z0, -i), 0);\r\n    return num / den;\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACO,MAAM,IAAI,CAAC;AAClB;AACA;AACA;AACA;AACA,EAAE,OAAO,QAAQ,CAAC,CAAC,EAAE;AACrB,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;AAChD,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;AACd,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;AACzB,IAAI,OAAO,CAAC,CAAC;AACb,EAAE,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,QAAQ,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,EAAE;AACjC,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC;AAC1B,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;AAChC,IAAI,MAAM,IAAI,GAAG,CAAC,GAAG,GAAG,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AACzC,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;AACjE,EAAE,CAAC;AACH;AACA;AACA;AACA,EAAE,OAAO,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE;AACxB,IAAI,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACzD,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACvC,MAAM,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D,IAAI,CAAC;AACL,IAAI,OAAO,CAAC,CAAC;AACb,EAAE,CAAC;AACH;AACA;AACA,EAAE,OAAO,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE;AACvB,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC;AACvC,IAAI,MAAM,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC7C,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE;AAC/B,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE;AACjC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,IAAI,OAAO,CAAC,CAAC;AACb,EAAE,CAAC;AACH;AACA;AACA,EAAE,OAAO,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE;AACvB,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;AAChD,IAAI,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC7C,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,IAAI,CAAC;AACL,IAAI,OAAO,MAAM,CAAC;AAClB,EAAE,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,aAAa,CAAC,KAAK,EAAE,GAAG,GAAG,KAAK,EAAE;AAC3C,IAAI,MAAM,IAAI,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACrD,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAChB;AACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC3C,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS;AAC5B,MAAM,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACzB;AACA;AACA,MAAM,IAAI,IAAI,GAAG,EAAE,CAAC;AACpB,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACjD,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS;AAC9B,QAAQ,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC3B,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE;AACxE,UAAU,IAAI,GAAG,CAAC,CAAC,CAAC,MAAM;AAC1B,QAAQ,CAAC;AACT,MAAM,CAAC;AACP;AACA,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE;AAClC;AACA,QAAQ,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACxC,QAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AACvB,MAAM,CAAC,MAAM,IAAI,IAAI,IAAI,CAAC,EAAE;AAC5B;AACA,QAAQ,MAAM,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAC7D,QAAQ,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAChC,QAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;AACpC,MAAM,CAAC,MAAM;AACb;AACA,QAAQ,MAAM,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;AAC7D,QAAQ,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAChC,QAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AACvB,MAAM,CAAC;AACP,IAAI,CAAC;AACL,IAAI,OAAO,CAAC,CAAC;AACb,EAAE,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,OAAO,CAAC,GAAG,EAAE,EAAE,EAAE;AAC1B,IAAI,OAAO,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;AACjD,EAAE,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,cAAc,CAAC,IAAI,EAAE;AAC9B,IAAI,MAAM,IAAI,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACpD,IAAI,MAAM,GAAG,GAAG,EAAE,CAAC;AACnB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC1C,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS;AAC5B,MAAM,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACxB,MAAM,IAAI,IAAI,GAAG,EAAE,CAAC;AACpB,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAChD,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS;AAC9B,QAAQ,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE;AAC5E,UAAU,IAAI,GAAG,CAAC,CAAC;AACnB,UAAU,MAAM;AAChB,QAAQ,CAAC;AACT,MAAM,CAAC;AACP,MAAM,IAAI,IAAI,IAAI,CAAC,EAAE;AACrB,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClC,QAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;AACpC,MAAM,CAAC,MAAM;AACb,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,QAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AACvB,MAAM,CAAC;AACP,IAAI,CAAC;AACL,IAAI,OAAO,GAAG,CAAC;AACf,EAAE,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,iBAAiB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;AACvD,IAAI,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;AACrB;AACA,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AACxC,IAAI,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AACrC,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AACxC;AACA,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AACxC,IAAI,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AACrC,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;AACxC;AACA,IAAI,OAAO;AACX,MAAM,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;AACpC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC;AAC9B,KAAK,CAAC;AACN,EAAE,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE;AAC7B,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,KAAK,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzE,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,KAAK,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACzE,IAAI,OAAO,GAAG,GAAG,GAAG,CAAC;AACrB,EAAE,CAAC;AACH;;;;"}