{"version":3,"file":"bessel-filter.js","sources":["../src/bessel-filter.js"],"sourcesContent":["// bessel-filter.js â€” Bessel IIR design\n// Author: Davit Akobia <dav.akobia@gmail.com>\n// License: MIT\n\nimport { ComplexNum as C } from './complex.js';\nimport { BaseIIRFilter } from './base-iir-filter.js';\n\n/**\n * Bessel filter - maximally flat group delay (linear phase)\n * @typedef {\"lowpass\"|\"highpass\"|\"bandpass\"|\"bandstop\"} FilterKind\n */\nexport class BesselFilter {\n  /**\n   * @param {FilterKind} kind\n   * @param {number|number[]} cutoffHz\n   * @param {number} fs\n   * @param {number} order\n   */\n  static design(kind, cutoffHz, fs, order = 4) {\n    if (order < 1) throw new Error('Bessel order must be >= 1');\n    \n    // Get Bessel polynomial roots for the given order\n    const roots = this.getBesselRoots(order);\n    \n    // Convert to poles (Bessel poles are in the left half-plane)\n    const poles = roots.map(root => ({\n      re: root.re,\n      im: root.im\n    }));\n    \n    // Bessel filters have no finite zeros (all zeros at infinity)\n    const zeros = [];\n    \n    // Calculate gain normalization\n    const k_gain = this.calculateGain(roots);\n    \n    return BaseIIRFilter.realize(kind, cutoffHz, fs, { z: zeros, p: poles, k: k_gain });\n  }\n  \n  /**\n   * Get Bessel polynomial roots for given order\n   */\n  static getBesselRoots(order) {\n    // Precomputed roots for low orders (more accurate than numerical methods)\n    const precomputedRoots = {\n      1: [{ re: -1, im: 0 }],\n      2: [{ re: -0.8660254037844386, im: 0.5 }, { re: -0.8660254037844386, im: -0.5 }],\n      3: [{ re: -0.7456403858488018, im: 0.7113666249728353 }, \n          { re: -0.7456403858488018, im: -0.7113666249728353 },\n          { re: -1.508661603608639, im: 0 }],\n      4: [{ re: -0.6572111716718829, im: 0.8301614350048733 },\n          { re: -0.6572111716718829, im: -0.8301614350048733 },\n          { re: -1.162757774154426, im: 0.5622795120623013 },\n          { re: -1.162757774154426, im: -0.5622795120623013 }],\n      5: [{ re: -0.5905759446119192, im: 0.9072067564574549 },\n          { re: -0.5905759446119192, im: -0.9072067564574549 },\n          { re: -0.9576765500242456, im: 0.5322327679276871 },\n          { re: -0.9576765500242456, im: -0.5322327679276871 },\n          { re: -1.703807323379973, im: 0 }],\n      6: [{ re: -0.5385526816693109, im: 0.9616876881954284 },\n          { re: -0.5385526816693109, im: -0.9616876881954284 },\n          { re: -0.7993909321727987, im: 0.6004358603932448 },\n          { re: -0.7993909321727987, im: -0.6004358603932448 },\n          { re: -1.1361155852109207, im: 0.22740742820168555 },\n          { re: -1.1361155852109207, im: -0.22740742820168555 }]\n    };\n    \n    if (precomputedRoots[order]) {\n      return precomputedRoots[order];\n    }\n    \n    // For higher orders, use numerical method\n    return this.computeBesselRoots(order);\n  }\n  \n  /**\n   * Compute Bessel polynomial roots numerically\n   */\n  static computeBesselRoots(order) {\n    // Generate Bessel polynomial coefficients\n    const coeffs = this.getBesselCoefficients(order);\n    \n    // Find roots using Durand-Kerner method\n    const roots = this.durandKerner(coeffs);\n    \n    return roots;\n  }\n  \n  /**\n   * Get Bessel polynomial coefficients\n   */\n  static getBesselCoefficients(order) {\n    const coeffs = new Array(order + 1).fill(0);\n    \n    for (let k = 0; k <= order; k++) {\n      const numerator = this.factorial(2 * order - k);\n      const denominator = Math.pow(2, order - k) * this.factorial(k) * this.factorial(order - k);\n      coeffs[k] = numerator / denominator;\n    }\n    \n    return coeffs;\n  }\n  \n  /**\n   * Durand-Kerner method for finding polynomial roots\n   */\n  static durandKerner(coeffs) {\n    const n = coeffs.length - 1;\n    const roots = [];\n    \n    // Initial guess - roots of unity scaled\n    for (let i = 0; i < n; i++) {\n      const angle = (2 * Math.PI * i) / n;\n      roots.push({\n        re: Math.cos(angle),\n        im: Math.sin(angle)\n      });\n    }\n    \n    // Iterate until convergence\n    const maxIter = 100;\n    const tolerance = 1e-10;\n    \n    for (let iter = 0; iter < maxIter; iter++) {\n      let maxChange = 0;\n      \n      for (let i = 0; i < n; i++) {\n        const current = roots[i];\n        const value = this.evaluatePolynomial(coeffs, current);\n        let denominator = 1;\n        \n        for (let j = 0; j < n; j++) {\n          if (i !== j) {\n            const diff = C.sub(current, roots[j]);\n            denominator = C.mul(denominator, diff);\n          }\n        }\n        \n        const correction = C.div(value, denominator);\n        const newRoot = C.sub(current, correction);\n        \n        const change = Math.hypot(newRoot.re - current.re, newRoot.im - current.im);\n        maxChange = Math.max(maxChange, change);\n        \n        roots[i] = newRoot;\n      }\n      \n      if (maxChange < tolerance) break;\n    }\n    \n    return roots;\n  }\n  \n  /**\n   * Evaluate polynomial at complex point\n   */\n  static evaluatePolynomial(coeffs, z) {\n    let result = C.of(0, 0);\n    let zPower = C.of(1, 0);\n    \n    for (let i = coeffs.length - 1; i >= 0; i--) {\n      result = C.add(result, C.scale(zPower, coeffs[i]));\n      zPower = C.mul(zPower, z);\n    }\n    \n    return result;\n  }\n  \n  /**\n   * Calculate gain normalization\n   */\n  static calculateGain(roots) {\n    // For Bessel filters, normalize so that |H(0)| = 1 for lowpass\n    let gain = 1;\n    for (const root of roots) {\n      const magnitude = Math.hypot(root.re, root.im);\n      gain *= magnitude;\n    }\n    return gain;\n  }\n  \n  /**\n   * Factorial function\n   */\n  static factorial(n) {\n    if (n <= 1) return 1;\n    let result = 1;\n    for (let i = 2; i <= n; i++) {\n      result *= i;\n    }\n    return result;\n  }\n}\n\nexport default BesselFilter;\n"],"names":["C"],"mappings":"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"}