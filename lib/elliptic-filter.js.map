{"version":3,"file":"elliptic-filter.js","sources":["../src/elliptic-filter.js"],"sourcesContent":["// elliptic-filter.js â€” Elliptic (Cauer) IIR design\n// Author: Davit Akobia <dav.akobia@gmail.com>\n// License: MIT\n\nimport { ComplexNum as C } from './complex.js';\nimport { BaseIIRFilter } from './base-iir-filter.js';\n\n/**\n * Elliptic (Cauer) filter - equiripple in both passband and stopband\n * @typedef {\"lowpass\"|\"highpass\"|\"bandpass\"|\"bandstop\"} FilterKind\n */\nexport class EllipticFilter {\n  /**\n   * @param {FilterKind} kind\n   * @param {number|number[]} cutoffHz\n   * @param {number} fs\n   * @param {number} order\n   * @param {number} rp Passband ripple (dB), e.g. 1\n   * @param {number} rs Stopband attenuation (dB), e.g. 40\n   */\n  static design(kind, cutoffHz, fs, order = 4, rp = 1, rs = 40) {\n    if (order < 1) throw new Error('Elliptic order must be >= 1');\n    \n    // Calculate selectivity factor k1\n    const k1 = Math.sqrt((Math.pow(10, rp/10) - 1) / (Math.pow(10, rs/10) - 1));\n    \n    // Calculate modular constant k\n    const k = Math.sqrt(1 - k1 * k1);\n    \n    // Calculate complete elliptic integral K(k)\n    const K = this.ellipticK(k);\n    const K1 = this.ellipticK(k1);\n    \n    // Calculate modular constant q\n    const q = Math.exp(-Math.PI * K1 / K);\n    \n    // Calculate poles and zeros\n    const poles = [];\n    const zeros = [];\n    \n    for (let i = 1; i <= order; i++) {\n      const u = (2 * i - 1) / order;\n      const sn = this.jacobiSN(u * K, k);\n      const cn = this.jacobiCN(u * K, k);\n      const dn = this.jacobiDN(u * K, k);\n      \n      // Pole location\n      const poleRe = -sn * cn * dn / (1 - k * k * sn * sn * sn * sn);\n      const poleIm = Math.sqrt(1 - poleRe * poleRe);\n      poles.push({ re: poleRe, im: poleIm });\n      \n      // Zero location (for odd order, one zero at infinity)\n      if (i <= Math.floor(order / 2)) {\n        const zeroRe = 0;\n        const zeroIm = 1 / (k * sn);\n        zeros.push({ re: zeroRe, im: zeroIm });\n        zeros.push({ re: zeroRe, im: -zeroIm });\n      }\n    }\n    \n    // Calculate gain constant\n    const k_gain = Math.pow(10, -rp/20);\n    \n    return BaseIIRFilter.realize(kind, cutoffHz, fs, { z: zeros, p: poles, k: k_gain });\n  }\n  \n  /**\n   * Complete elliptic integral of the first kind K(k)\n   */\n  static ellipticK(k) {\n    const tol = 1e-10;\n    let a = 1;\n    let b = Math.sqrt(1 - k * k);\n    let c = k;\n    \n    while (Math.abs(a - b) > tol) {\n      const a_new = (a + b) / 2;\n      const b_new = Math.sqrt(a * b);\n      const c_new = (a - b) / 2;\n      a = a_new;\n      b = b_new;\n      c = c_new;\n    }\n    \n    return Math.PI / (2 * a);\n  }\n  \n  /**\n   * Jacobi elliptic function sn(u,k)\n   */\n  static jacobiSN(u, k) {\n    const tol = 1e-10;\n    const K = this.ellipticK(k);\n    const q = Math.exp(-Math.PI * this.ellipticK(Math.sqrt(1 - k * k)) / K);\n    \n    let sn = 0;\n    let term = 1;\n    let n = 0;\n    \n    while (Math.abs(term) > tol && n < 100) {\n      const qn = Math.pow(q, n * n);\n      const sinTerm = Math.sin((2 * n + 1) * Math.PI * u / (2 * K));\n      term = qn * sinTerm;\n      sn += term;\n      n++;\n    }\n    \n    return sn * 2 * Math.pow(q, 0.25) / Math.sqrt(k);\n  }\n  \n  /**\n   * Jacobi elliptic function cn(u,k)\n   */\n  static jacobiCN(u, k) {\n    const sn = this.jacobiSN(u, k);\n    return Math.sqrt(1 - sn * sn);\n  }\n  \n  /**\n   * Jacobi elliptic function dn(u,k)\n   */\n  static jacobiDN(u, k) {\n    const sn = this.jacobiSN(u, k);\n    return Math.sqrt(1 - k * k * sn * sn);\n  }\n}\n\nexport default EllipticFilter;\n"],"names":[],"mappings":"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"}