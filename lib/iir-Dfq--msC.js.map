{"version":3,"file":"iir-Dfq--msC.js","sources":["../src/base-iir-filter.js","../src/butterworth-filter.js","../src/chebyshev-filter.js","../src/chebyshev-type2-filter.js","../src/linkwitz-riley-filter.js","../src/elliptic-filter.js","../src/bessel-filter.js","../src/iir.js"],"sourcesContent":["// base-iir-filter.js — Base class for IIR filter design\r\n// Author: Davit Akobia <dav.akobia@gmail.com>\r\n// License: MIT\r\n\r\nimport { ComplexNum as C } from './complex.js';\r\nimport { Util } from './utils.js';\r\n\r\n/**\r\n * @typedef {\"lowpass\"|\"highpass\"|\"bandpass\"|\"bandstop\"} FilterKind\r\n * @typedef {{b:number[], a:[number, number, number]}} Biquad\r\n * @typedef {{b: number[], a: number[], sections: Biquad[]}} FilterResult\r\n */\r\n\r\n/**\r\n * Abstract base class for IIR filter design\r\n * Provides common functionality and structure for all IIR filter types\r\n */\r\nexport class BaseIIRFilter {\r\n  /**\r\n   * Validates common filter parameters\r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @throws {Error} If parameters are invalid\r\n   */\r\n  static validateCommonParameters(kind, cutoffHz, fs, order) {\r\n    if (order < 1) {\r\n      throw new Error('Order must be >= 1');\r\n    }\r\n    \r\n    if (fs <= 0) {\r\n      throw new Error('Sampling frequency must be positive');\r\n    }\r\n    \r\n    if (kind === 'lowpass' || kind === 'highpass') {\r\n      const fc = /** @type {number} */ (cutoffHz);\r\n      if (fc <= 0 || fc >= fs / 2) {\r\n        throw new Error('Cutoff frequency must be 0 < fc < fs/2');\r\n      }\r\n    } else if (kind === 'bandpass' || kind === 'bandstop') {\r\n      const [f1, f2] = /** @type {[number, number]} */ (cutoffHz);\r\n      if (!(f1 > 0 && f2 > f1 && f2 < fs / 2)) {\r\n        throw new Error('Invalid band edges: must satisfy 0 < f1 < f2 < fs/2');\r\n      }\r\n    } else {\r\n      throw new Error(`Unsupported filter kind: ${kind}`);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Builds filter from normalized prototype poles\r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {C[]} polesNorm - Normalized poles\r\n   * @param {number} normalizeAt - Normalization point (1 for LP, -1 for HP)\r\n   * @param {number} wc - Prewarped cutoff frequency\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static fromPrototype(kind, fs, polesNorm, normalizeAt, wc) {\r\n    /** @type {Biquad[]} */\r\n    const sections = [];\r\n\r\n    const pairs = Util.pairConjugates(polesNorm);\r\n    for (const pair of pairs) {\r\n      const [p1, p2] = pair.length === 2 ? pair : [pair[0], null];\r\n\r\n      // LP (Ωp=1) quadratic\r\n      let a2_lp, a1_lp, a0_lp;\r\n      if (p2) {\r\n        a2_lp = 1;\r\n        a1_lp = -2 * p1.re;\r\n        a0_lp = p1.re * p1.re + p1.im * p1.im;\r\n      } else {\r\n        a2_lp = 0; a1_lp = 1; a0_lp = -p1.re;\r\n      }\r\n\r\n      // Transform to analog LP/HP at Ωc = wc\r\n      let A2, A1, A0; // denom\r\n      let b2, b1, b0; // numer\r\n\r\n      if (kind === 'lowpass') {\r\n        A2 = a2_lp;\r\n        A1 = a1_lp * wc;\r\n        A0 = a0_lp * wc * wc;\r\n        b2 = 0; b1 = 0; b0 = 1;              // constant numerator (LP)\r\n      } else if (kind === 'highpass') {\r\n        // s → Ωc/s\r\n        if (a2_lp !== 0) {\r\n          // second-order: a0 s^2 + a1 Ωc s + a2 Ωc^2\r\n          A2 = a0_lp;\r\n          A1 = a1_lp * wc;\r\n          A0 = a2_lp * wc * wc;\r\n          b2 = 1; b1 = 0; b0 = 0;            // s^2 ⇒ double zero at DC\r\n        } else {\r\n          // first-order: a0 s + a1 Ωc\r\n          A2 = 0;\r\n          A1 = a0_lp;\r\n          A0 = a1_lp * wc;\r\n          b2 = 0; b1 = 1; b0 = 0;            // s ⇒ single zero at DC\r\n        }\r\n      } else {\r\n        throw new Error('fromPrototype supports only lowpass/highpass');\r\n      }\r\n\r\n      sections.push(Util.bilinearMapBiquad(b2, b1, b0, A2, A1, A0, fs));\r\n    }\r\n\r\n    // Compose polynomials, then digital normalization at z0.\r\n    let bPoly = [1], aPoly = [1];\r\n    for (const s of sections) { \r\n      bPoly = Util.polymul(bPoly, s.b); \r\n      aPoly = Util.polymul(aPoly, s.a); \r\n    }\r\n\r\n    const g = 1 / Util.evalHzAtZ(bPoly, aPoly, normalizeAt);\r\n    if (sections.length > 0) {\r\n      // Apply to the LAST section for better conditioning\r\n      const last = sections.length - 1;\r\n      sections[last].b = sections[last].b.map(v => v * g);\r\n    }\r\n\r\n    // Recompute polynomials after gain distribution\r\n    bPoly = [1]; aPoly = [1];\r\n    for (const s of sections) { \r\n      bPoly = Util.polymul(bPoly, s.b); \r\n      aPoly = Util.polymul(aPoly, s.a); \r\n    }\r\n\r\n    return { b: bPoly, a: aPoly, sections };\r\n  }\r\n\r\n  /**\r\n   * Abstract method for pole calculation - must be implemented by subclasses\r\n   * @param {number} order - Filter order\r\n   * @param {...any} params - Additional parameters\r\n   * @returns {C[]} Array of complex poles\r\n   * @abstract\r\n   */\r\n  static calculatePoles(order, ...params) {\r\n    throw new Error('calculatePoles must be implemented by subclass');\r\n  }\r\n\r\n  /**\r\n   * Abstract method for filter design - must be implemented by subclasses\r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @param {...any} params - Additional parameters\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   * @abstract\r\n   */\r\n  static design(kind, cutoffHz, fs, order, ...params) {\r\n    throw new Error('design must be implemented by subclass');\r\n  }\r\n}\r\n","// butterworth-filter.js — Butterworth filter design implementation\r\n// Author: Davit Akobia <dav.akobia@gmail.com>\r\n// License: MIT\r\n\r\nimport { ComplexNum as C } from './complex.js';\r\nimport { Util } from './utils.js';\r\nimport { BaseIIRFilter } from './base-iir-filter.js';\r\nimport { FIRDesigner } from './fir.js';\r\n\r\n/**\r\n * @typedef {\"lowpass\"|\"highpass\"|\"bandpass\"|\"bandstop\"} FilterKind\r\n * @typedef {{b:number[], a:[number, number, number]}} Biquad\r\n * @typedef {{b: number[], a: number[], sections: Biquad[]}} FilterResult\r\n */\r\n\r\n/**\r\n * Butterworth filter design class\r\n * Provides a clean, focused interface for Butterworth filter generation\r\n */\r\nexport class ButterworthFilter extends BaseIIRFilter {\r\n\r\n  /**\r\n   * Calculates normalized Butterworth poles for given order\r\n   * @param {number} order - Filter order\r\n   * @returns {C[]} Array of complex poles in left half plane\r\n   */\r\n  static calculatePoles(order) {\r\n    const poles = [];\r\n    for (let k = 0; k < order; k++) {\r\n      const theta = Math.PI * (2 * k + 1 + order) / (2 * order);\r\n      const p = C.of(Math.cos(theta), Math.sin(theta));\r\n      if (p.re < 0) poles.push(p);\r\n    }\r\n    return poles;\r\n  }\r\n\r\n\r\n  /**\r\n   * Designs a lowpass or highpass Butterworth filter\r\n   * @param {FilterKind} kind - 'lowpass' or 'highpass'\r\n   * @param {number} cutoffHz - Cutoff frequency\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static designLowHighPass(kind, cutoffHz, fs, order) {\r\n    const fc = /** @type {number} */ (cutoffHz);\r\n    const wc = Util.prewarp(fc, fs);\r\n    const polesNorm = ButterworthFilter.calculatePoles(order);\r\n    const zNorm = (kind === 'lowpass') ? 1 : -1;\r\n    \r\n    return BaseIIRFilter.fromPrototype(kind, fs, polesNorm, zNorm, wc);\r\n  }\r\n\r\n  /**\r\n   * Designs a bandpass Butterworth filter using lowpass + highpass combination\r\n   * @param {[number, number]} cutoffHz - Band edges [f1, f2]\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static designBandPass(cutoffHz, fs, order) {\r\n    const [f1, f2] = /** @type {[number, number]} */ (cutoffHz);\r\n    \r\n    // Design highpass filter at f1\r\n    const hpFilter = ButterworthFilter.designLowHighPass('highpass', f1, fs, order);\r\n    \r\n    // Design lowpass filter at f2\r\n    const lpFilter = ButterworthFilter.designLowHighPass('lowpass', f2, fs, order);\r\n    \r\n    // Combine filters by cascading (multiplying transfer functions)\r\n    const combinedB = Util.polymul(hpFilter.b, lpFilter.b);\r\n    const combinedA = Util.polymul(hpFilter.a, lpFilter.a);\r\n    const combinedSections = hpFilter.sections.concat(lpFilter.sections);\r\n    \r\n    return { b: combinedB, a: combinedA, sections: combinedSections };\r\n  }\r\n\r\n  /**\r\n   * Designs a bandstop Butterworth filter using parallel lowpass + highpass combination\r\n   * @param {[number, number]} cutoffHz - Band edges [f1, f2]\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static designBandStop(cutoffHz, fs, order) {\r\n    const [f1, f2] = /** @type {[number, number]} */ (cutoffHz);\r\n    \r\n    // Design lowpass filter at f1\r\n    const lpFilter = ButterworthFilter.designLowHighPass('lowpass', f1, fs, order);\r\n    \r\n    // Design highpass filter at f2\r\n    const hpFilter = ButterworthFilter.designLowHighPass('highpass', f2, fs, order);\r\n    \r\n    // For bandstop: H_bandstop(s) = H_lp(s) + H_hp(s)\r\n    // This requires parallel combination (addition) of transfer functions\r\n    // Convert to common denominator and add numerators\r\n    const commonA = Util.polymul(lpFilter.a, hpFilter.a);\r\n    const lpNum = Util.polymul(lpFilter.b, hpFilter.a);\r\n    const hpNum = Util.polymul(hpFilter.b, lpFilter.a);\r\n    const combinedB = Util.polyadd(lpNum, hpNum);\r\n    \r\n    // Combine sections by creating a parallel structure\r\n    const combinedSections = [\r\n      ...lpFilter.sections.map(s => ({ b: s.b.slice(), a: s.a.slice() })),\r\n      ...hpFilter.sections.map(s => ({ b: s.b.slice(), a: s.a.slice() }))\r\n    ];\r\n    \r\n    return { b: combinedB, a: commonA, sections: combinedSections };\r\n  }\r\n\r\n  /**\r\n   * Designs a bandpass or bandstop Butterworth filter using IIR combinations\r\n   * @param {FilterKind} kind - 'bandpass' or 'bandstop'\r\n   * @param {[number, number]} cutoffHz - Band edges [f1, f2]\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static designBandPassStop(kind, cutoffHz, fs, order) {\r\n    if (kind === 'bandpass') {\r\n      return ButterworthFilter.designBandPass(cutoffHz, fs, order);\r\n    } else if (kind === 'bandstop') {\r\n      return ButterworthFilter.designBandStop(cutoffHz, fs, order);\r\n    }\r\n    throw new Error('Unsupported filter kind for band design');\r\n  }\r\n\r\n\r\n  /**\r\n   * Main design method for Butterworth filters\r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static design(kind, cutoffHz, fs, order) {\r\n    // Validate parameters using base class method\r\n    ButterworthFilter.validateCommonParameters(kind, cutoffHz, fs, order);\r\n\r\n    // Enforce maximum order limit for IIR filters\r\n    if (order > 12) {\r\n      throw new Error(`Butterworth filter order ${order} exceeds maximum allowed order of 12. For higher orders, consider using cascaded lower-order sections or alternative filter types.`);\r\n    }\r\n\r\n    // Route to appropriate design method\r\n    if (kind === 'lowpass' || kind === 'highpass') {\r\n      return ButterworthFilter.designLowHighPass(kind, cutoffHz, fs, order);\r\n    } else if (kind === 'bandpass' || kind === 'bandstop') {\r\n      return ButterworthFilter.designBandPassStop(kind, cutoffHz, fs, order);\r\n    }\r\n\r\n    throw new Error('Unsupported filter kind');\r\n  }\r\n}\r\n","// chebyshev-filter.js — Chebyshev Type 1 filter design implementation\r\n// Author: Davit Akobia <dav.akobia@gmail.com>\r\n// License: MIT\r\n\r\nimport { ComplexNum as C } from './complex.js';\r\nimport { Util } from './utils.js';\r\nimport { BaseIIRFilter } from './base-iir-filter.js';\r\nimport { FIRDesigner } from './fir.js';\r\n\r\n/**\r\n * @typedef {\"lowpass\"|\"highpass\"|\"bandpass\"|\"bandstop\"} FilterKind\r\n * @typedef {{b:number[], a:[number, number, number]}} Biquad\r\n * @typedef {{b: number[], a: number[], sections: Biquad[]}} FilterResult\r\n */\r\n\r\n/**\r\n * Chebyshev Type 1 filter design class\r\n * Provides a clean, focused interface for Chebyshev Type 1 filter generation\r\n */\r\nexport class ChebyshevFilter extends BaseIIRFilter {\r\n  /**\r\n   * Validates Chebyshev Type 1 filter parameters\r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @param {number} ripple - Passband ripple in dB\r\n   * @throws {Error} If parameters are invalid\r\n   */\r\n  static validateParameters(kind, cutoffHz, fs, order, ripple) {\r\n    // Use base class validation first\r\n    ChebyshevFilter.validateCommonParameters(kind, cutoffHz, fs, order);\r\n    \r\n    // Additional Chebyshev-specific validation\r\n    if (ripple <= 0) {\r\n      throw new Error('Passband ripple must be positive');\r\n    }\r\n    \r\n    if (ripple > 10) {\r\n      throw new Error('Passband ripple should be <= 10 dB for practical designs');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates normalized Chebyshev Type 1 poles for given order and ripple\r\n   * @param {number} order - Filter order\r\n   * @param {number} ripple - Passband ripple in dB\r\n   * @returns {C[]} Array of complex poles in left half plane\r\n   */\r\n  static calculatePoles(order, ripple) {\r\n    const eps = Math.sqrt(Math.pow(10, ripple / 10) - 1);\r\n    const alpha = Math.asinh(1 / eps) / order;\r\n    const sinhA = Math.sinh(alpha);\r\n    const coshA = Math.cosh(alpha);\r\n    \r\n    const poles = [];\r\n    for (let k = 0; k < order; k++) {\r\n      const theta = Math.PI * (2 * k + 1) / (2 * order);\r\n      const re = -sinhA * Math.sin(theta);\r\n      const im = coshA * Math.cos(theta);\r\n      const p = C.of(re, im);\r\n      if (p.re < 0) poles.push(p);\r\n    }\r\n    return poles;\r\n  }\r\n\r\n  /**\r\n   * Designs a lowpass or highpass Chebyshev Type 1 filter\r\n   * @param {FilterKind} kind - 'lowpass' or 'highpass'\r\n   * @param {number} cutoffHz - Cutoff frequency\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @param {number} ripple - Passband ripple in dB\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static designLowHighPass(kind, cutoffHz, fs, order, ripple) {\r\n    const fc = /** @type {number} */ (cutoffHz);\r\n    const wc = Util.prewarp(fc, fs);\r\n    const polesNorm = ChebyshevFilter.calculatePoles(order, ripple);\r\n    const zNorm = (kind === 'lowpass') ? 1 : -1;\r\n    \r\n    return BaseIIRFilter.fromPrototype(kind, fs, polesNorm, zNorm, wc);\r\n  }\r\n\r\n  /**\r\n   * Designs a bandpass Chebyshev Type 1 filter using lowpass + highpass combination\r\n   * @param {[number, number]} cutoffHz - Band edges [f1, f2]\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @param {number} ripple - Passband ripple in dB\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static designBandPass(cutoffHz, fs, order, ripple) {\r\n    const [f1, f2] = /** @type {[number, number]} */ (cutoffHz);\r\n    \r\n    // Design highpass filter at f1\r\n    const hpFilter = ChebyshevFilter.designLowHighPass('highpass', f1, fs, order, ripple);\r\n    \r\n    // Design lowpass filter at f2\r\n    const lpFilter = ChebyshevFilter.designLowHighPass('lowpass', f2, fs, order, ripple);\r\n    \r\n    // Combine filters by cascading (multiplying transfer functions)\r\n    const combinedB = Util.polymul(hpFilter.b, lpFilter.b);\r\n    const combinedA = Util.polymul(hpFilter.a, lpFilter.a);\r\n    const combinedSections = hpFilter.sections.concat(lpFilter.sections);\r\n    \r\n    return { b: combinedB, a: combinedA, sections: combinedSections };\r\n  }\r\n\r\n  /**\r\n   * Designs a bandstop Chebyshev Type 1 filter using parallel lowpass + highpass combination\r\n   * @param {[number, number]} cutoffHz - Band edges [f1, f2]\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @param {number} ripple - Passband ripple in dB\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static designBandStop(cutoffHz, fs, order, ripple) {\r\n    const [f1, f2] = /** @type {[number, number]} */ (cutoffHz);\r\n    \r\n    // Design lowpass filter at f1\r\n    const lpFilter = ChebyshevFilter.designLowHighPass('lowpass', f1, fs, order, ripple);\r\n    \r\n    // Design highpass filter at f2\r\n    const hpFilter = ChebyshevFilter.designLowHighPass('highpass', f2, fs, order, ripple);\r\n    \r\n    // For bandstop: H_bandstop(s) = H_lp(s) + H_hp(s)\r\n    // This requires parallel combination (addition) of transfer functions\r\n    // Convert to common denominator and add numerators\r\n    const commonA = Util.polymul(lpFilter.a, hpFilter.a);\r\n    const lpNum = Util.polymul(lpFilter.b, hpFilter.a);\r\n    const hpNum = Util.polymul(hpFilter.b, lpFilter.a);\r\n    const combinedB = Util.polyadd(lpNum, hpNum);\r\n    \r\n    // Combine sections by creating a parallel structure\r\n    const combinedSections = [\r\n      ...lpFilter.sections.map(s => ({ b: s.b.slice(), a: s.a.slice() })),\r\n      ...hpFilter.sections.map(s => ({ b: s.b.slice(), a: s.a.slice() }))\r\n    ];\r\n    \r\n    return { b: combinedB, a: commonA, sections: combinedSections };\r\n  }\r\n\r\n  /**\r\n   * Designs a bandpass or bandstop Chebyshev Type 1 filter using IIR combinations\r\n   * @param {FilterKind} kind - 'bandpass' or 'bandstop'\r\n   * @param {[number, number]} cutoffHz - Band edges [f1, f2]\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @param {number} ripple - Passband ripple in dB\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static designBandPassStop(kind, cutoffHz, fs, order, ripple) {\r\n    if (kind === 'bandpass') {\r\n      return ChebyshevFilter.designBandPass(cutoffHz, fs, order, ripple);\r\n    } else if (kind === 'bandstop') {\r\n      return ChebyshevFilter.designBandStop(cutoffHz, fs, order, ripple);\r\n    }\r\n    throw new Error('Unsupported filter kind for band design');\r\n  }\r\n\r\n  /**\r\n   * Main design method for Chebyshev Type 1 filters\r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @param {number} ripple - Passband ripple in dB (default: 1)\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static design(kind, cutoffHz, fs, order, ripple = 1) {\r\n    // Validate parameters using Chebyshev-specific validation\r\n    ChebyshevFilter.validateParameters(kind, cutoffHz, fs, order, ripple);\r\n\r\n    // Enforce maximum order limit for IIR filters\r\n    if (order > 12) {\r\n      throw new Error(`Chebyshev filter order ${order} exceeds maximum allowed order of 12. For higher orders, consider using cascaded lower-order sections or alternative filter types.`);\r\n    }\r\n\r\n    // Route to appropriate design method\r\n    if (kind === 'lowpass' || kind === 'highpass') {\r\n      return ChebyshevFilter.designLowHighPass(kind, cutoffHz, fs, order, ripple);\r\n    } else if (kind === 'bandpass' || kind === 'bandstop') {\r\n      return ChebyshevFilter.designBandPassStop(kind, cutoffHz, fs, order, ripple);\r\n    }\r\n\r\n    throw new Error('Unsupported filter kind');\r\n  }\r\n\r\n}\r\n","// chebyshev-type2-filter.js — Chebyshev Type 2 (inverse Chebyshev) filter design implementation\n// Author: Davit Akobia <dav.akobia@gmail.com>\n// License: MIT\n\nimport { ComplexNum as C } from './complex.js';\nimport { Util } from './utils.js';\nimport { BaseIIRFilter } from './base-iir-filter.js';\n\n/**\n * @typedef {\"lowpass\"|\"highpass\"|\"bandpass\"|\"bandstop\"} FilterKind\n * @typedef {{b:number[], a:[number, number, number]}} Biquad\n * @typedef {{b: number[], a: number[], sections: Biquad[]}} FilterResult\n */\n\n/**\n * Chebyshev Type 2 (inverse Chebyshev) filter design class\n * Provides a clean, focused interface for Chebyshev Type 2 filter generation\n */\nexport class ChebyshevType2Filter extends BaseIIRFilter {\n  /**\n   * Validates Chebyshev Type 2 filter parameters\n   * @param {FilterKind} kind - Filter type\n   * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\n   * @param {number} fs - Sampling frequency\n   * @param {number} order - Filter order\n   * @param {number} stopbandAttenuation - Stopband attenuation in dB\n   * @throws {Error} If parameters are invalid\n   */\n  static validateParameters(kind, cutoffHz, fs, order, stopbandAttenuation) {\n    // Use base class validation first (this exists in your base file)\n    ChebyshevType2Filter.validateCommonParameters(kind, cutoffHz, fs, order);\n\n    // Additional Chebyshev Type 2-specific validation\n    if (!(stopbandAttenuation > 0)) {\n      throw new Error('Stopband attenuation must be positive');\n    }\n  }\n\n  /**\n   * Calculates normalized inverse-Chebyshev (Type-II) prototype poles and zeros (Ωc=1)\n   * Zeros lie on jΩ axis at Ωz = ±sec(theta_k), producing equiripple stopband.\n   * @param {number} order\n   * @param {number} rs Stopband attenuation in dB\n   * @returns {{poles: {re:number,im:number}[], zerosW: number[]}} zerosW are positive Ωz values (we'll add ± pairs)\n   */\n  static calculatePolesAndZeros(order, rs) {\n    // eps2 = 1/(10^(rs/10) - 1); using parameterization with a = asinh(1/sqrt(eps2))/n\n    const eps2 = 1 / (Math.pow(10, rs / 10) - 1);\n    const a = Math.asinh(1 / Math.sqrt(eps2)) / order;\n\n    const poles = [];\n    for (let k = 1; k <= order; k++) {\n      const theta = Math.PI * (2 * k - 1) / (2 * order);\n      const re = -Math.sinh(a) * Math.sin(theta);\n      const im =  Math.cosh(a) * Math.cos(theta);\n      poles.push(C.of(re, im));\n    }\n\n    // Positive-frequency zero magnitudes (we'll create ±jΩ for each)\n    const zerosW = [];\n    const m = Math.floor(order / 2);\n    for (let k = 1; k <= m; k++) {\n      const theta = Math.PI * (2 * k - 1) / (2 * order);\n      zerosW.push(1 / Math.cos(theta)); // sec(theta)\n    }\n\n    return { poles, zerosW };\n  }\n\n  /**\n   * Build LP analog biquad from a conjugate pole pair and an optional zero pair (at ±jΩz).\n   * The section is then frequency-scaled by Ωc (= wc) and bilinear-mapped to digital.\n   * @param {'lowpass'|'highpass'} kind\n   * @param {{re:number, im:number}[]} polePair length 1 or 2 (conjugate pair)\n   * @param {number|null} zeroW positive Ωz for zero pair, or null if no finite zeros in this section\n   * @param {number} wc prewarped edge (Ωc)\n   * @param {number} fs sampling rate (Hz)\n   * @returns {Biquad} digital biquad (b,a) with a0=1\n   */\n  static mapSectionLP_HP(kind, polePair, zeroW, wc, fs) {\n    // Denominator LP prototype (normalized at Ωc=1):\n    let a2_lp, a1_lp, a0_lp;\n    if (polePair.length === 2) {\n      const p = polePair[0]; // conjugate partner implied\n      a2_lp = 1;\n      a1_lp = -2 * p.re;\n      a0_lp = p.re * p.re + p.im * p.im;\n    } else {\n      // First-order leftover when order is odd\n      const p = polePair[0];\n      a2_lp = 0; a1_lp = 1; a0_lp = -p.re;\n    }\n\n    // Numerator LP prototype: either unity (no finite zeros) or s^2 + Ωz^2\n    let b2_lp, b1_lp, b0_lp;\n    if (zeroW != null) {\n      b2_lp = 1; b1_lp = 0; b0_lp = zeroW * zeroW;\n    } else {\n      // No finite zeros for this section (odd-order leftover)\n      b2_lp = 0; b1_lp = 0; b0_lp = 1;\n    }\n\n    // Frequency scaling to desired Ωc = wc and LP/HP analog mapping (mirror BaseIIRFilter logic)\n    let A2, A1, A0, B2, B1, B0;\n\n    if (kind === 'lowpass') {\n      // LP: multiply s by wc in first-order coefficients\n      A2 = a2_lp;        A1 = a1_lp * wc;        A0 = a0_lp * wc * wc;\n      B2 = b2_lp;        B1 = b1_lp * wc;        B0 = b0_lp * wc * wc;\n    } else {\n      // HP: s -> wc/s\n      if (a2_lp !== 0) {\n        // second-order denominator\n        A2 = a0_lp;      A1 = a1_lp * wc;        A0 = a2_lp * wc * wc;\n      } else {\n        // first-order denominator\n        A2 = 0;          A1 = a0_lp;             A0 = a1_lp * wc;\n      }\n\n      // numerator mapping under s -> wc/s:\n      if (b2_lp !== 0) {\n        // b(s) = s^2 + (Ωz)^2 -> B(s) = (wc^2) + (Ωz^2) s^2   (after clearing 1/s^2)\n        B2 = b0_lp;      B1 = b1_lp * wc;        B0 = b2_lp * wc * wc;\n      } else if (b1_lp !== 0) {\n        // (not used here) single zero → maps to s term after transform\n        B2 = 0;          B1 = b0_lp;             B0 = b1_lp * wc;\n      } else {\n        // Constant numerator -> becomes s^2 term after clearing (zero at DC of order 2)\n        B2 = b0_lp;      B1 = 0;                 B0 = 0;\n      }\n    }\n\n    // Bilinear transform to digital\n    return Util.bilinearMapBiquad(B2, B1, B0, A2, A1, A0, fs);\n  }\n\n  /**\n   * LP / HP design with proper inverse-Chebyshev zeros\n   * @param {'lowpass'|'highpass'} kind\n   * @param {number} cutoffHz\n   * @param {number} fs\n   * @param {number} order\n   * @param {number} rs\n   * @returns {FilterResult}\n   */\n  static designLPHP(kind, cutoffHz, fs, order, rs) {\n    const wc = Util.prewarp(cutoffHz, fs);\n    const { poles, zerosW } = this.calculatePolesAndZeros(order, rs);\n\n    // Pair poles for SOS\n    const polePairs = Util.pairConjugates(poles);\n\n    // Assign zero pairs to as many sections as available (floor(n/2) of them).\n    const sections = [];\n    let zi = 0;\n    for (const pair of polePairs) {\n      const zW = (zi < zerosW.length) ? zerosW[zi++] * wc : null; // scale Ωz by Ωc\n      const sec = this.mapSectionLP_HP(kind, pair, zW, wc, fs);\n      sections.push(sec);\n    }\n\n    // Compose overall polynomials\n    let b = [1], a = [1];\n    for (const s of sections) {\n      b = Util.polymul(b, s.b);\n      a = Util.polymul(a, s.a);\n    }\n\n    // Normalize digital gain\n    const zNorm = (kind === 'lowpass') ? 1 : -1; // DC for LP, Nyquist for HP\n    const g = 1 / Util.evalHzAtZ(b, a, zNorm);\n    // Apply gain to the last section for numerical conditioning\n    if (sections.length) {\n      const L = sections.length - 1;\n      sections[L] = { b: sections[L].b.map(v => v * g), a: sections[L].a.slice() };\n      // Recompose b with gain\n      b = [1]; a = [1];\n      for (const s of sections) {\n        b = Util.polymul(b, s.b);\n        a = Util.polymul(a, s.a);\n      }\n    }\n\n    return { b, a, sections };\n  }\n\n  /**\n   * Designs a lowpass Chebyshev Type 2 filter\n   */\n  static designLowPass(cutoffHz, fs, order, stopbandAttenuation) {\n    return this.designLPHP('lowpass', cutoffHz, fs, order, stopbandAttenuation);\n  }\n\n  /**\n   * Designs a highpass Chebyshev Type 2 filter\n   */\n  static designHighPass(cutoffHz, fs, order, stopbandAttenuation) {\n    return this.designLPHP('highpass', cutoffHz, fs, order, stopbandAttenuation);\n  }\n\n  /**\n   * Designs a bandpass Chebyshev Type 2 filter (built from HP@f1 and LP@f2 cascaded)\n   * NOTE: This is a practical IIR approach; full LP→BP analog transform can be added if desired.\n   */\n  static designBandPass(cutoffHz, fs, order, stopbandAttenuation) {\n    const [f1, f2] = /** @type {[number, number]} */ (cutoffHz);\n    const hp = this.designHighPass(f1, fs, order, stopbandAttenuation);\n    const lp = this.designLowPass(f2, fs, order, stopbandAttenuation);\n    return {\n      b: Util.polymul(hp.b, lp.b),\n      a: Util.polymul(hp.a, lp.a),\n      sections: [...hp.sections, ...lp.sections]\n    };\n  }\n\n  /**\n   * Designs a bandstop Chebyshev Type 2 filter (parallel sum of LP@f1 and HP@f2)\n   */\n  static designBandStop(cutoffHz, fs, order, stopbandAttenuation) {\n    const [f1, f2] = /** @type {[number, number]} */ (cutoffHz);\n    const lp = this.designLowPass(f1, fs, order, stopbandAttenuation);\n    const hp = this.designHighPass(f2, fs, order, stopbandAttenuation);\n\n    const a = Util.polymul(lp.a, hp.a);\n    const b_lp = Util.polymul(lp.b, hp.a);\n    const b_hp = Util.polymul(hp.b, lp.a);\n    const b = Util.polyadd(b_lp, b_hp);\n\n    return { b, a, sections: [...lp.sections, ...hp.sections] };\n  }\n\n  /**\n   * Designs a bandpass or bandstop Chebyshev Type 2 filter\n   */\n  static designBandPassStop(kind, cutoffHz, fs, order, stopbandAttenuation) {\n    if (kind === 'bandpass') return this.designBandPass(cutoffHz, fs, order, stopbandAttenuation);\n    if (kind === 'bandstop') return this.designBandStop(cutoffHz, fs, order, stopbandAttenuation);\n    throw new Error('Unsupported filter kind for band design');\n  }\n\n  /**\n   * Main design entry\n   */\n  static design(kind, cutoffHz, fs, order, stopbandAttenuation = 40) {\n    this.validateParameters(kind, cutoffHz, fs, order, stopbandAttenuation);\n    \n    // Enforce maximum order limit for IIR filters\n    if (order > 12) {\n      throw new Error(`Chebyshev Type 2 filter order ${order} exceeds maximum allowed order of 12. For higher orders, consider using cascaded lower-order sections or alternative filter types.`);\n    }\n    \n    if (kind === 'lowpass')  return this.designLowPass(cutoffHz, fs, order, stopbandAttenuation);\n    if (kind === 'highpass') return this.designHighPass(cutoffHz, fs, order, stopbandAttenuation);\n    if (kind === 'bandpass' || kind === 'bandstop')\n      return this.designBandPassStop(kind, cutoffHz, fs, order, stopbandAttenuation);\n    throw new Error('Unsupported filter kind');\n  }\n}\n","// linkwitz-riley-filter.js — Linkwitz-Riley filter design implementation\r\n// Author: Davit Akobia <dav.akobia@gmail.com>\r\n// License: MIT\r\n\r\nimport { ComplexNum as C } from './complex.js';\r\nimport { Util } from './utils.js';\r\nimport { BaseIIRFilter } from './base-iir-filter.js';\r\nimport { ButterworthFilter } from './butterworth-filter.js';\r\nimport { FIRDesigner } from './fir.js';\r\n\r\n/**\r\n * @typedef {\"lowpass\"|\"highpass\"|\"bandpass\"|\"bandstop\"} FilterKind\r\n * @typedef {{b:number[], a:[number, number, number]}} Biquad\r\n * @typedef {{b: number[], a: number[], sections: Biquad[]}} FilterResult\r\n */\r\n\r\n/**\r\n * Linkwitz-Riley filter design class\r\n * Provides a clean, focused interface for Linkwitz-Riley filter generation\r\n * Linkwitz-Riley filters are cascades of two same-order Butterworth filters\r\n */\r\nexport class LinkwitzRileyFilter extends BaseIIRFilter {\r\n  /**\r\n   * Validates Linkwitz-Riley filter parameters\r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order (will be adjusted to even if odd)\r\n   * @throws {Error} If parameters are invalid\r\n   */\r\n  static validateParameters(kind, cutoffHz, fs, order) {\r\n    // Use base class validation first\r\n    LinkwitzRileyFilter.validateCommonParameters(kind, cutoffHz, fs, order);\r\n    \r\n    // Additional Linkwitz-Riley-specific validation\r\n    if (order < 2) {\r\n      throw new Error('Order must be >= 2 for Linkwitz-Riley filters');\r\n    }\r\n    \r\n    // Note: We don't throw an error for odd orders, we just adjust them\r\n  }\r\n\r\n  /**\r\n   * Designs a Linkwitz-Riley filter by cascading two Butterworth filters\r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order (must be even)\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static design(kind, cutoffHz, fs, order) {\r\n    // Validate parameters\r\n    LinkwitzRileyFilter.validateParameters(kind, cutoffHz, fs, order);\r\n    \r\n    // Enforce maximum order limit for IIR filters\r\n    if (order > 12) {\r\n      throw new Error(`Linkwitz-Riley filter order ${order} exceeds maximum allowed order of 12. For higher orders, consider using cascaded lower-order sections or alternative filter types.`);\r\n    }\r\n    \r\n    // Ensure order is even\r\n    const evenOrder = (order % 2 === 0) ? order : (order + 1);\r\n    const halfOrder = evenOrder / 2;\r\n    \r\n    // Design the base Butterworth filter\r\n    const baseFilter = ButterworthFilter.design(kind, cutoffHz, fs, halfOrder);\r\n    \r\n    // Cascade two identical Butterworth filters\r\n    const cascadedSections = baseFilter.sections.concat(\r\n      baseFilter.sections.map(s => ({ \r\n        b: s.b.slice(), \r\n        a: s.a.slice() \r\n      }))\r\n    );\r\n    \r\n    // Multiply the transfer functions\r\n    const cascadedB = Util.polymul(baseFilter.b, baseFilter.b);\r\n    const cascadedA = Util.polymul(baseFilter.a, baseFilter.a);\r\n    \r\n    return { \r\n      b: cascadedB, \r\n      a: cascadedA, \r\n      sections: cascadedSections \r\n    };\r\n  }\r\n\r\n  /**\r\n   * Designs a lowpass Linkwitz-Riley filter\r\n   * @param {number} cutoffHz - Cutoff frequency\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order (must be even)\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static designLowPass(cutoffHz, fs, order) {\r\n    return LinkwitzRileyFilter.design('lowpass', cutoffHz, fs, order);\r\n  }\r\n\r\n  /**\r\n   * Designs a highpass Linkwitz-Riley filter\r\n   * @param {number} cutoffHz - Cutoff frequency\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order (must be even)\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static designHighPass(cutoffHz, fs, order) {\r\n    return LinkwitzRileyFilter.design('highpass', cutoffHz, fs, order);\r\n  }\r\n\r\n  /**\r\n   * Designs a bandpass Linkwitz-Riley filter using lowpass + highpass combination\r\n   * @param {[number, number]} cutoffHz - Band edges [f1, f2]\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order (must be even)\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static designBandPass(cutoffHz, fs, order) {\r\n    const [f1, f2] = /** @type {[number, number]} */ (cutoffHz);\r\n    \r\n    // Design highpass Linkwitz-Riley filter at f1\r\n    const hpFilter = LinkwitzRileyFilter.design('highpass', f1, fs, order);\r\n    \r\n    // Design lowpass Linkwitz-Riley filter at f2\r\n    const lpFilter = LinkwitzRileyFilter.design('lowpass', f2, fs, order);\r\n    \r\n    // Combine filters by cascading (multiplying transfer functions)\r\n    const combinedB = Util.polymul(hpFilter.b, lpFilter.b);\r\n    const combinedA = Util.polymul(hpFilter.a, lpFilter.a);\r\n    const combinedSections = hpFilter.sections.concat(lpFilter.sections);\r\n    \r\n    return { b: combinedB, a: combinedA, sections: combinedSections };\r\n  }\r\n\r\n  /**\r\n   * Designs a bandstop Linkwitz-Riley filter using parallel highpass + lowpass combination\r\n   * @param {[number, number]} cutoffHz - Band edges [f1, f2]\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order (must be even)\r\n   * @returns {FilterResult} Filter coefficients and sections\r\n   */\r\n  static designBandStop(cutoffHz, fs, order) {\r\n    const [f1, f2] = /** @type {[number, number]} */ (cutoffHz);\r\n    \r\n    // Design lowpass Linkwitz-Riley filter at f1\r\n    const lpFilter = LinkwitzRileyFilter.design('lowpass', f1, fs, order);\r\n    \r\n    // Design highpass Linkwitz-Riley filter at f2\r\n    const hpFilter = LinkwitzRileyFilter.design('highpass', f2, fs, order);\r\n    \r\n    // For bandstop: H_bandstop(s) = H_lp(s) + H_hp(s)\r\n    // This requires parallel combination (addition) of transfer functions\r\n    // Convert to common denominator and add numerators\r\n    const commonA = Util.polymul(lpFilter.a, hpFilter.a);\r\n    const lpNum = Util.polymul(lpFilter.b, hpFilter.a);\r\n    const hpNum = Util.polymul(hpFilter.b, lpFilter.a);\r\n    const combinedB = Util.polyadd(lpNum, hpNum);\r\n    \r\n    // Combine sections by creating a parallel structure\r\n    const combinedSections = [\r\n      ...lpFilter.sections.map(s => ({ b: s.b.slice(), a: s.a.slice() })),\r\n      ...hpFilter.sections.map(s => ({ b: s.b.slice(), a: s.a.slice() }))\r\n    ];\r\n    \r\n    return { b: combinedB, a: commonA, sections: combinedSections };\r\n  }\r\n\r\n  /**\r\n   * Calculates the actual order of the Linkwitz-Riley filter\r\n   * @param {number} requestedOrder - Requested filter order\r\n   * @returns {number} Actual filter order (always even)\r\n   */\r\n  static getActualOrder(requestedOrder) {\r\n    return (requestedOrder % 2 === 0) ? requestedOrder : (requestedOrder + 1);\r\n  }\r\n\r\n  /**\r\n   * Gets the half-order used for the base Butterworth filter\r\n   * @param {number} order - Filter order\r\n   * @returns {number} Half order for base Butterworth filter\r\n   */\r\n  static getHalfOrder(order) {\r\n    return LinkwitzRileyFilter.getActualOrder(order) / 2;\r\n  }\r\n\r\n  /**\r\n   * Calculates the total number of sections in the Linkwitz-Riley filter\r\n   * @param {number} order - Filter order\r\n   * @returns {number} Total number of sections\r\n   */\r\n  static getNumberOfSections(order) {\r\n    const halfOrder = LinkwitzRileyFilter.getHalfOrder(order);\r\n    return halfOrder * 2; // Two cascaded Butterworth filters\r\n  }\r\n\r\n  /**\r\n   * Gets recommended orders for different applications\r\n   * @returns {Object} Object with recommended orders for different use cases\r\n   */\r\n  static getRecommendedOrders() {\r\n    return {\r\n      basic: 2,        // 2nd order (1st order Butterworth cascaded twice)\r\n      standard: 4,     // 4th order (2nd order Butterworth cascaded twice)\r\n      high: 6,         // 6th order (3rd order Butterworth cascaded twice)\r\n      premium: 8,      // 8th order (4th order Butterworth cascaded twice)\r\n      professional: 12 // 12th order (6th order Butterworth cascaded twice)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validates that the order is even and adjusts if necessary\r\n   * @param {number} order - Filter order\r\n   * @returns {number} Adjusted order (always even)\r\n   */\r\n  static adjustOrderToEven(order) {\r\n    if (order < 2) {\r\n      return 2; // Minimum order\r\n    }\r\n    return (order % 2 === 0) ? order : (order + 1);\r\n  }\r\n\r\n  /**\r\n   * Gets information about the Linkwitz-Riley filter design\r\n   * @param {number} order - Filter order\r\n   * @returns {Object} Information about the filter design\r\n   */\r\n  static getFilterInfo(order) {\r\n    const actualOrder = LinkwitzRileyFilter.getActualOrder(order);\r\n    const halfOrder = LinkwitzRileyFilter.getHalfOrder(order);\r\n    const sections = LinkwitzRileyFilter.getNumberOfSections(order);\r\n    \r\n    return {\r\n      requestedOrder: order,\r\n      actualOrder: actualOrder,\r\n      halfOrder: halfOrder,\r\n      sections: sections,\r\n      isAdjusted: order !== actualOrder,\r\n      description: `Linkwitz-Riley ${actualOrder}th order (${halfOrder}th order Butterworth cascaded twice)`\r\n    };\r\n  }\r\n}\r\n","import { BaseIIRFilter } from './base-iir-filter.js';\nimport { ComplexNum, C } from './complex.js';\nimport { Util } from './utils.js';\nimport { FIRDesigner } from './fir.js';\n\n/**\n * Elliptic (Cauer) Filter Designer\n * \n * Elliptic filters have equiripple behavior in both passband and stopband,\n * making them the most efficient in terms of filter order for given specifications.\n * \n * Key characteristics:\n * - Equiripple passband (controlled by passband ripple)\n * - Equiripple stopband (controlled by stopband attenuation)\n * - Finite zeros in the stopband\n * - Minimum filter order for given specifications\n */\nexport class EllipticFilter extends BaseIIRFilter {\n    \n    /**\n     * Design an elliptic filter (unified interface)\n     * @param {string} kind - Filter type ('lowpass', 'highpass', 'bandpass', 'bandstop')\n     * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\n     * @param {number} fs - Sampling frequency\n     * @param {number} order - Filter order\n     * @param {number} passbandRipple - Passband ripple in dB\n     * @param {number} stopbandAttenuation - Stopband attenuation in dB\n     * @returns {Object} Filter coefficients {b, a, sections}\n     */\n    static design(kind, cutoffHz, fs, order, passbandRipple = 1, stopbandAttenuation = 40) {\n        // Enforce maximum order limit for IIR filters\n        if (order > 12) {\n            throw new Error(`Elliptic filter order ${order} exceeds maximum allowed order of 12. For higher orders, consider using cascaded lower-order sections or alternative filter types.`);\n        }\n        \n        switch (kind) {\n            case 'lowpass':\n                return this.designLowPass(cutoffHz, fs, order, passbandRipple, stopbandAttenuation);\n            case 'highpass':\n                return this.designHighPass(cutoffHz, fs, order, passbandRipple, stopbandAttenuation);\n            case 'bandpass':\n                if (Array.isArray(cutoffHz) && cutoffHz.length === 2) {\n                    return this.designBandPass(cutoffHz[0], cutoffHz[1], fs, order, passbandRipple, stopbandAttenuation);\n                }\n                throw new Error('Bandpass requires [lowCutoff, highCutoff] frequencies');\n            case 'bandstop':\n                if (Array.isArray(cutoffHz) && cutoffHz.length === 2) {\n                    return this.designBandStop(cutoffHz[0], cutoffHz[1], fs, order, passbandRipple, stopbandAttenuation);\n                }\n                throw new Error('Bandstop requires [lowCutoff, highCutoff] frequencies');\n            default:\n                throw new Error(`Unsupported filter type: ${kind}`);\n        }\n    }\n    \n    /**\n     * Design an elliptic lowpass filter\n     * @param {number} cutoffHz - Cutoff frequency in Hz\n     * @param {number} fs - Sampling frequency in Hz\n     * @param {number} order - Filter order\n     * @param {number} passbandRipple - Passband ripple in dB\n     * @param {number} stopbandAttenuation - Stopband attenuation in dB\n     * @returns {Object} Filter coefficients {b, a, sections}\n     */\n    static designLowPass(cutoffHz, fs, order, passbandRipple, stopbandAttenuation) {\n        // True Elliptic IIR filter implementation\n        const wc = Util.prewarp(cutoffHz, fs);\n        \n        // Calculate Elliptic poles and zeros\n        const { poles, zeros } = this.calculateEllipticPolesAndZeros(order, passbandRipple, stopbandAttenuation);\n        \n        // Convert to digital filter using bilinear transform\n        return this.fromPrototype('lowpass', fs, poles, 1, wc);\n    }\n    \n    /**\n     * Design an elliptic highpass filter\n     * @param {number} cutoffHz - Cutoff frequency in Hz\n     * @param {number} fs - Sampling frequency in Hz\n     * @param {number} order - Filter order\n     * @param {number} passbandRipple - Passband ripple in dB\n     * @param {number} stopbandAttenuation - Stopband attenuation in dB\n     * @returns {Object} Filter coefficients {b, a, sections}\n     */\n    static designHighPass(cutoffHz, fs, order, passbandRipple, stopbandAttenuation) {\n        // True Elliptic IIR filter implementation\n        const wc = Util.prewarp(cutoffHz, fs);\n        \n        // Calculate Elliptic poles and zeros\n        const { poles, zeros } = this.calculateEllipticPolesAndZeros(order, passbandRipple, stopbandAttenuation);\n        \n        // Apply highpass transformation (s -> 1/s)\n        const transformedPoles = poles.map(p => C.div(C.of(1, 0), p));\n        \n        return this.fromPrototype('highpass', fs, transformedPoles, -1, wc);\n    }\n    \n    /**\n     * Design an elliptic bandpass filter using lowpass + highpass combination\n     * @param {number} lowCutoffHz - Lower cutoff frequency in Hz\n     * @param {number} highCutoffHz - Upper cutoff frequency in Hz\n     * @param {number} fs - Sampling frequency in Hz\n     * @param {number} order - Filter order\n     * @param {number} passbandRipple - Passband ripple in dB\n     * @param {number} stopbandAttenuation - Stopband attenuation in dB\n     * @returns {Object} Filter coefficients {b, a, sections}\n     */\n    static designBandPass(lowCutoffHz, highCutoffHz, fs, order, passbandRipple, stopbandAttenuation) {\n        // Design highpass filter at lowCutoffHz\n        const hpFilter = this.designHighPass(lowCutoffHz, fs, order, passbandRipple, stopbandAttenuation);\n        \n        // Design lowpass filter at highCutoffHz\n        const lpFilter = this.designLowPass(highCutoffHz, fs, order, passbandRipple, stopbandAttenuation);\n        \n        // Combine filters by cascading (multiplying transfer functions)\n        const combinedB = Util.polymul(hpFilter.b, lpFilter.b);\n        const combinedA = Util.polymul(hpFilter.a, lpFilter.a);\n        const combinedSections = hpFilter.sections.concat(lpFilter.sections);\n        \n        return { b: combinedB, a: combinedA, sections: combinedSections };\n    }\n    \n    /**\n     * Design an elliptic bandstop filter using parallel highpass + lowpass combination\n     * @param {number} lowCutoffHz - Lower cutoff frequency in Hz\n     * @param {number} highCutoffHz - Upper cutoff frequency in Hz\n     * @param {number} fs - Sampling frequency in Hz\n     * @param {number} order - Filter order\n     * @param {number} passbandRipple - Passband ripple in dB\n     * @param {number} stopbandAttenuation - Stopband attenuation in dB\n     * @returns {Object} Filter coefficients {b, a, sections}\n     */\n    static designBandStop(lowCutoffHz, highCutoffHz, fs, order, passbandRipple, stopbandAttenuation) {\n        // Design lowpass filter at lowCutoffHz\n        const lpFilter = this.designLowPass(lowCutoffHz, fs, order, passbandRipple, stopbandAttenuation);\n        \n        // Design highpass filter at highCutoffHz\n        const hpFilter = this.designHighPass(highCutoffHz, fs, order, passbandRipple, stopbandAttenuation);\n        \n        // For bandstop: H_bandstop(s) = H_lp(s) + H_hp(s)\n        // This requires parallel combination (addition) of transfer functions\n        // Convert to common denominator and add numerators\n        const commonA = Util.polymul(lpFilter.a, hpFilter.a);\n        const lpNum = Util.polymul(lpFilter.b, hpFilter.a);\n        const hpNum = Util.polymul(hpFilter.b, lpFilter.a);\n        const combinedB = Util.polyadd(lpNum, hpNum);\n        \n        // Combine sections by creating a parallel structure\n        const combinedSections = [\n            ...lpFilter.sections.map(s => ({ b: s.b.slice(), a: s.a.slice() })),\n            ...hpFilter.sections.map(s => ({ b: s.b.slice(), a: s.a.slice() }))\n        ];\n        \n        return { b: combinedB, a: commonA, sections: combinedSections };\n    }\n    \n    /**\n     * Calculate elliptic filter poles and zeros\n     * @param {number} order - Filter order\n     * @param {number} passbandRipple - Passband ripple in dB\n     * @param {number} stopbandAttenuation - Stopband attenuation in dB\n     * @returns {Object} {poles, zeros}\n     */\n    static calculateEllipticPolesAndZeros(order, passbandRipple, stopbandAttenuation) {\n        // Convert dB to linear values\n        const epsilon = Math.sqrt(Math.pow(10, passbandRipple / 10) - 1);\n        const A = Math.pow(10, stopbandAttenuation / 20);\n        \n        // Calculate selectivity factor\n        const k1 = epsilon / Math.sqrt(A * A - 1);\n        \n        // Calculate modular constant\n        const k = this.calculateModularConstant(k1, order);\n        \n        // Calculate complete elliptic integral\n        const K = this.completeEllipticIntegral(k);\n        const Kprime = this.completeEllipticIntegral(Math.sqrt(1 - k * k));\n        \n        // Calculate poles and zeros\n        const poles = [];\n        const zeros = [];\n        \n        for (let i = 1; i <= Math.floor(order / 2); i++) {\n            const u = (2 * i - 1) * K / order;\n            const sn = this.jacobiSn(u, k);\n            const cn = this.jacobiCn(u, k);\n            const dn = this.jacobiDn(u, k);\n            \n            // Calculate pole location\n            const real = -sn * cn / (1 - sn * sn);\n            const imag = dn / (1 - sn * sn);\n            poles.push(C.of(real, imag));\n            poles.push(C.of(real, -imag)); // Conjugate\n            \n            // Calculate zero location\n            const zeroReal = 1 / (k * sn);\n            const zeroImag = 0;\n            zeros.push(C.of(zeroReal, zeroImag));\n            zeros.push(C.of(zeroReal, -zeroImag)); // Conjugate\n        }\n        \n        // Add real pole/zero for odd orders\n        if (order % 2 === 1) {\n            const u = K / order;\n            const sn = this.jacobiSn(u, k);\n            poles.push(C.of(-sn, 0));\n            zeros.push(C.of(1 / (k * sn), 0));\n        }\n        \n        return { poles, zeros };\n    }\n    \n    /**\n     * Calculate the modular constant k\n     * @param {number} k1 - Selectivity factor\n     * @param {number} order - Filter order\n     * @returns {number} Modular constant\n     */\n    static calculateModularConstant(k1, order) {\n        // This is a simplified calculation\n        // In practice, this requires solving a complex equation\n        const q = Math.exp(-Math.PI * this.completeEllipticIntegral(Math.sqrt(1 - k1 * k1)) / this.completeEllipticIntegral(k1));\n        let k = Math.sqrt(q);\n        \n        // Refine using Newton's method\n        for (let i = 0; i < 10; i++) {\n            const K = this.completeEllipticIntegral(k);\n            const Kprime = this.completeEllipticIntegral(Math.sqrt(1 - k * k));\n            const f = K / Kprime - order * Math.log(q) / Math.PI;\n            const df = this.ellipticIntegralDerivative(k);\n            k = k - f / df;\n        }\n        \n        return k;\n    }\n    \n    /**\n     * Complete elliptic integral of the first kind\n     * @param {number} k - Modulus\n     * @returns {number} Complete elliptic integral\n     */\n    static completeEllipticIntegral(k) {\n        if (k === 0) return Math.PI / 2;\n        if (k === 1) return Infinity;\n        \n        // Use series expansion for accuracy\n        let sum = 1;\n        let term = 1;\n        const k2 = k * k;\n        \n        for (let n = 1; n < 100; n++) {\n            term *= (2 * n - 1) * (2 * n - 1) * k2 / (2 * n * 2 * n);\n            sum += term;\n            if (Math.abs(term) < 1e-15) break;\n        }\n        \n        return Math.PI / 2 * sum;\n    }\n    \n    /**\n     * Jacobi elliptic function sn(u,k)\n     * @param {number} u - Argument\n     * @param {number} k - Modulus\n     * @returns {number} sn(u,k)\n     */\n    static jacobiSn(u, k) {\n        // Simplified implementation using series expansion\n        const k2 = k * k;\n        let sum = 0;\n        let term = 1;\n        \n        for (let n = 0; n < 50; n++) {\n            sum += term * Math.sin((2 * n + 1) * u);\n            term *= k2;\n            if (Math.abs(term) < 1e-15) break;\n        }\n        \n        return sum;\n    }\n    \n    /**\n     * Jacobi elliptic function cn(u,k)\n     * @param {number} u - Argument\n     * @param {number} k - Modulus\n     * @returns {number} cn(u,k)\n     */\n    static jacobiCn(u, k) {\n        const sn = this.jacobiSn(u, k);\n        return Math.sqrt(1 - sn * sn);\n    }\n    \n    /**\n     * Jacobi elliptic function dn(u,k)\n     * @param {number} u - Argument\n     * @param {number} k - Modulus\n     * @returns {number} dn(u,k)\n     */\n    static jacobiDn(u, k) {\n        const sn = this.jacobiSn(u, k);\n        const k2 = k * k;\n        return Math.sqrt(1 - k2 * sn * sn);\n    }\n    \n    /**\n     * Derivative of elliptic integral (for Newton's method)\n     * @param {number} k - Modulus\n     * @returns {number} Derivative\n     */\n    static ellipticIntegralDerivative(k) {\n        const k2 = k * k;\n        const kprime2 = 1 - k2;\n        return this.completeEllipticIntegral(k) / (k * kprime2) - this.completeEllipticIntegral(Math.sqrt(kprime2)) / (k * k);\n    }\n    \n    /**\n     * Get recommended passband ripples for elliptic filters\n     * @returns {Array} Array of recommended ripple values in dB\n     */\n    static getRecommendedPassbandRipples() {\n        return [0.1, 0.2, 0.5, 1.0, 2.0, 3.0, 5.0];\n    }\n    \n    /**\n     * Get recommended stopband attenuations for elliptic filters\n     * @returns {Array} Array of recommended attenuation values in dB\n     */\n    static getRecommendedStopbandAttenuations() {\n        return [20, 30, 40, 50, 60, 70, 80, 90, 100];\n    }\n    \n    /**\n     * Calculate actual passband ripple for given parameters\n     * @param {number} order - Filter order\n     * @param {number} passbandRipple - Target passband ripple in dB\n     * @param {number} stopbandAttenuation - Stopband attenuation in dB\n     * @returns {number} Actual passband ripple in dB\n     */\n    static calculateActualPassbandRipple(order, passbandRipple, stopbandAttenuation) {\n        // This is a simplified calculation\n        // In practice, this requires solving the elliptic filter equations\n        const epsilon = Math.sqrt(Math.pow(10, passbandRipple / 10) - 1);\n        const A = Math.pow(10, stopbandAttenuation / 20);\n        \n        // Simplified relationship\n        const actualEpsilon = epsilon * Math.pow(A, -1 / order);\n        return 10 * Math.log10(1 + actualEpsilon * actualEpsilon);\n    }\n    \n    /**\n     * Calculate actual stopband attenuation for given parameters\n     * @param {number} order - Filter order\n     * @param {number} passbandRipple - Passband ripple in dB\n     * @param {number} stopbandAttenuation - Target stopband attenuation in dB\n     * @returns {number} Actual stopband attenuation in dB\n     */\n    static calculateActualStopbandAttenuation(order, passbandRipple, stopbandAttenuation) {\n        // This is a simplified calculation\n        // In practice, this requires solving the elliptic filter equations\n        const epsilon = Math.sqrt(Math.pow(10, passbandRipple / 10) - 1);\n        const A = Math.pow(10, stopbandAttenuation / 20);\n        \n        // Simplified relationship\n        const actualA = A * Math.pow(epsilon, 1 / order);\n        return 20 * Math.log10(actualA);\n    }\n}\n","import { BaseIIRFilter } from './base-iir-filter.js';\r\nimport { ComplexNum, C } from './complex.js';\r\nimport { Util } from './utils.js';\r\nimport { FIRDesigner } from './fir.js';\r\n\r\n/**\r\n * Bessel Filter Designer\r\n * \r\n * Bessel filters are characterized by maximally flat group delay (linear phase response)\r\n * in the passband. They are commonly used in applications where phase linearity is critical.\r\n * \r\n * Key characteristics:\r\n * - Maximally flat group delay\r\n * - Linear phase response in passband\r\n * - Gradual rolloff in stopband\r\n * - No ripple in passband or stopband\r\n * - Preserves signal shape (minimal distortion)\r\n */\r\nexport class BesselFilter extends BaseIIRFilter {\r\n    \r\n    /**\r\n     * Design a Bessel filter (unified interface)\r\n     * @param {string} kind - Filter type ('lowpass', 'highpass', 'bandpass', 'bandstop')\r\n     * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\r\n     * @param {number} fs - Sampling frequency\r\n     * @param {number} order - Filter order\r\n     * @returns {Object} Filter coefficients {b, a, sections}\r\n     */\r\n    static design(kind, cutoffHz, fs, order) {\r\n        // Enforce maximum order limit for IIR filters\r\n        if (order > 12) {\r\n            throw new Error(`Bessel filter order ${order} exceeds maximum allowed order of 12. For higher orders, consider using cascaded lower-order sections or alternative filter types.`);\r\n        }\r\n        \r\n        switch (kind) {\r\n            case 'lowpass':\r\n                return this.designLowPass(cutoffHz, fs, order);\r\n            case 'highpass':\r\n                return this.designHighPass(cutoffHz, fs, order);\r\n            case 'bandpass':\r\n                if (Array.isArray(cutoffHz) && cutoffHz.length === 2) {\r\n                    return this.designBandPass(cutoffHz[0], cutoffHz[1], fs, order);\r\n                }\r\n                throw new Error('Bandpass requires [lowCutoff, highCutoff] frequencies');\r\n            case 'bandstop':\r\n                if (Array.isArray(cutoffHz) && cutoffHz.length === 2) {\r\n                    return this.designBandStop(cutoffHz[0], cutoffHz[1], fs, order);\r\n                }\r\n                throw new Error('Bandstop requires [lowCutoff, highCutoff] frequencies');\r\n            default:\r\n                throw new Error(`Unsupported filter type: ${kind}`);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Design a Bessel lowpass filter\r\n     * @param {number} cutoffHz - Cutoff frequency in Hz\r\n     * @param {number} fs - Sampling frequency in Hz\r\n     * @param {number} order - Filter order\r\n     * @returns {Object} Filter coefficients {b, a, sections}\r\n     */\r\n    static designLowPass(cutoffHz, fs, order) {\r\n        // True Bessel IIR filter implementation\r\n        const wc = Util.prewarp(cutoffHz, fs);\r\n        const poles = this.calculateBesselPoles(order);\r\n        \r\n        // Convert to digital filter using bilinear transform\r\n        return this.fromPrototype('lowpass', fs, poles, 1, wc);\r\n    }\r\n    \r\n    /**\r\n     * Design a Bessel highpass filter\r\n     * @param {number} cutoffHz - Cutoff frequency in Hz\r\n     * @param {number} fs - Sampling frequency in Hz\r\n     * @param {number} order - Filter order\r\n     * @returns {Object} Filter coefficients {b, a, sections}\r\n     */\r\n    static designHighPass(cutoffHz, fs, order) {\r\n        // True Bessel IIR filter implementation\r\n        const wc = Util.prewarp(cutoffHz, fs);\r\n        const poles = this.calculateBesselPoles(order);\r\n        \r\n        // Apply highpass transformation (s -> 1/s)\r\n        const transformedPoles = poles.map(p => C.div(C.of(1, 0), p));\r\n        \r\n        return this.fromPrototype('highpass', fs, transformedPoles, -1, wc);\r\n    }\r\n    \r\n    /**\r\n     * Design a Bessel bandpass filter using lowpass + highpass combination\r\n     * @param {number} lowCutoffHz - Lower cutoff frequency in Hz\r\n     * @param {number} highCutoffHz - Upper cutoff frequency in Hz\r\n     * @param {number} fs - Sampling frequency in Hz\r\n     * @param {number} order - Filter order\r\n     * @returns {Object} Filter coefficients {b, a, sections}\r\n     */\r\n    static designBandPass(lowCutoffHz, highCutoffHz, fs, order) {\r\n        // Design highpass filter at lowCutoffHz\r\n        const hpFilter = this.designHighPass(lowCutoffHz, fs, order);\r\n        \r\n        // Design lowpass filter at highCutoffHz\r\n        const lpFilter = this.designLowPass(highCutoffHz, fs, order);\r\n        \r\n        // Combine filters by cascading (multiplying transfer functions)\r\n        const combinedB = Util.polymul(hpFilter.b, lpFilter.b);\r\n        const combinedA = Util.polymul(hpFilter.a, lpFilter.a);\r\n        const combinedSections = hpFilter.sections.concat(lpFilter.sections);\r\n        \r\n        return { b: combinedB, a: combinedA, sections: combinedSections };\r\n    }\r\n    \r\n    /**\r\n     * Design a Bessel bandstop filter using parallel highpass + lowpass combination\r\n     * @param {number} lowCutoffHz - Lower cutoff frequency in Hz\r\n     * @param {number} highCutoffHz - Upper cutoff frequency in Hz\r\n     * @param {number} fs - Sampling frequency in Hz\r\n     * @param {number} order - Filter order\r\n     * @returns {Object} Filter coefficients {b, a, sections}\r\n     */\r\n    static designBandStop(lowCutoffHz, highCutoffHz, fs, order) {\r\n        // Design lowpass filter at lowCutoffHz\r\n        const lpFilter = this.designLowPass(lowCutoffHz, fs, order);\r\n        \r\n        // Design highpass filter at highCutoffHz\r\n        const hpFilter = this.designHighPass(highCutoffHz, fs, order);\r\n        \r\n        // For bandstop: H_bandstop(s) = H_lp(s) + H_hp(s)\r\n        // This requires parallel combination (addition) of transfer functions\r\n        // Convert to common denominator and add numerators\r\n        const commonA = Util.polymul(lpFilter.a, hpFilter.a);\r\n        const lpNum = Util.polymul(lpFilter.b, hpFilter.a);\r\n        const hpNum = Util.polymul(hpFilter.b, lpFilter.a);\r\n        const combinedB = Util.polyadd(lpNum, hpNum);\r\n        \r\n        // Combine sections by creating a parallel structure\r\n        const combinedSections = [\r\n            ...lpFilter.sections.map(s => ({ b: s.b.slice(), a: s.a.slice() })),\r\n            ...hpFilter.sections.map(s => ({ b: s.b.slice(), a: s.a.slice() }))\r\n        ];\r\n        \r\n        return { b: combinedB, a: commonA, sections: combinedSections };\r\n    }\r\n    \r\n    /**\r\n     * Calculate Bessel filter poles\r\n     * @param {number} order - Filter order\r\n     * @returns {Array} Array of complex poles\r\n     */\r\n    static calculateBesselPoles(order) {\r\n        // Bessel filter poles are the roots of the Bessel polynomial\r\n        // For low orders, we can use pre-calculated values\r\n        const poleSets = {\r\n            1: [C.of(-1, 0)],\r\n            2: [C.of(-1.5, 0.8660254037844386), C.of(-1.5, -0.8660254037844386)],\r\n            3: [C.of(-2.322185354626086, 0), C.of(-1.838907322686957, 1.754380959783721), C.of(-1.838907322686957, -1.754380959783721)],\r\n            4: [C.of(-2.103789397179628, 0.6657060219931349), C.of(-2.103789397179628, -0.6657060219931349), C.of(-1.896210602820372, 1.744447419188405), C.of(-1.896210602820372, -1.744447419188405)],\r\n            5: [C.of(-2.324674303181611, 0), C.of(-2.048290428681656, 1.000044768299361), C.of(-2.048290428681656, -1.000044768299361), C.of(-1.673416736234146, 1.673416736234146), C.of(-1.673416736234146, -1.673416736234146)],\r\n            6: [C.of(-2.132906311462530, 0.4718706301774892), C.of(-2.132906311462530, -0.4718706301774892), C.of(-1.905412542845325, 1.552914270615124), C.of(-1.905412542845325, -1.552914270615124), C.of(-1.606938159156189, 1.606938159156189), C.of(-1.606938159156189, -1.606938159156189)],\r\n            7: [C.of(-2.324674303181611, 0), C.of(-2.048290428681656, 1.000044768299361), C.of(-2.048290428681656, -1.000044768299361), C.of(-1.673416736234146, 1.673416736234146), C.of(-1.673416736234146, -1.673416736234146), C.of(-1.414213562373095, 1.414213562373095), C.of(-1.414213562373095, -1.414213562373095)],\r\n            8: [C.of(-2.132906311462530, 0.4718706301774892), C.of(-2.132906311462530, -0.4718706301774892), C.of(-1.905412542845325, 1.552914270615124), C.of(-1.905412542845325, -1.552914270615124), C.of(-1.606938159156189, 1.606938159156189), C.of(-1.606938159156189, -1.606938159156189), C.of(-1.414213562373095, 1.414213562373095), C.of(-1.414213562373095, -1.414213562373095)],\r\n            9: [C.of(-2.324674303181611, 0), C.of(-2.048290428681656, 1.000044768299361), C.of(-2.048290428681656, -1.000044768299361), C.of(-1.673416736234146, 1.673416736234146), C.of(-1.673416736234146, -1.673416736234146), C.of(-1.414213562373095, 1.414213562373095), C.of(-1.414213562373095, -1.414213562373095), C.of(-1.224744871391589, 1.224744871391589), C.of(-1.224744871391589, -1.224744871391589)],\r\n            10: [C.of(-2.132906311462530, 0.4718706301774892), C.of(-2.132906311462530, -0.4718706301774892), C.of(-1.905412542845325, 1.552914270615124), C.of(-1.905412542845325, -1.552914270615124), C.of(-1.606938159156189, 1.606938159156189), C.of(-1.606938159156189, -1.606938159156189), C.of(-1.414213562373095, 1.414213562373095), C.of(-1.414213562373095, -1.414213562373095), C.of(-1.224744871391589, 1.224744871391589), C.of(-1.224744871391589, -1.224744871391589)]\r\n        };\r\n        \r\n        if (poleSets[order]) {\r\n            return poleSets[order];\r\n        }\r\n        \r\n        // For higher orders, use numerical calculation\r\n        return this.calculateBesselPolesNumerical(order);\r\n    }\r\n    \r\n    /**\r\n     * Calculate Bessel poles numerically for higher orders\r\n     * @param {number} order - Filter order\r\n     * @returns {Array} Array of complex poles\r\n     */\r\n    static calculateBesselPolesNumerical(order) {\r\n        // This is a simplified numerical approach\r\n        // In practice, this would use more sophisticated root-finding algorithms\r\n        \r\n        const poles = [];\r\n        \r\n        // For even orders, all poles are complex conjugate pairs\r\n        if (order % 2 === 0) {\r\n            for (let i = 0; i < order / 2; i++) {\r\n                const angle = (2 * i + 1) * Math.PI / (2 * order);\r\n                const real = -Math.cos(angle);\r\n                const imag = Math.sin(angle);\r\n                poles.push(C.of(real, imag));\r\n                poles.push(C.of(real, -imag));\r\n            }\r\n        } else {\r\n            // For odd orders, one real pole and complex conjugate pairs\r\n            poles.push(C.of(-1, 0));\r\n            for (let i = 0; i < (order - 1) / 2; i++) {\r\n                const angle = (2 * i + 1) * Math.PI / (2 * order);\r\n                const real = -Math.cos(angle);\r\n                const imag = Math.sin(angle);\r\n                poles.push(C.of(real, imag));\r\n                poles.push(C.of(real, -imag));\r\n            }\r\n        }\r\n        \r\n        return poles;\r\n    }\r\n    \r\n    /**\r\n     * Calculate Bessel polynomial coefficients\r\n     * @param {number} order - Filter order\r\n     * @returns {Array} Array of polynomial coefficients\r\n     */\r\n    static calculateBesselPolynomial(order) {\r\n        // Bessel polynomials are defined recursively\r\n        // B_n(s) = (2n-1)B_{n-1}(s) + s^2 B_{n-2}(s)\r\n        \r\n        if (order === 0) return [1];\r\n        if (order === 1) return [1, 1];\r\n        \r\n        let b_n_minus_2 = [1]; // B_0(s) = 1\r\n        let b_n_minus_1 = [1, 1]; // B_1(s) = 1 + s\r\n        \r\n        for (let n = 2; n <= order; n++) {\r\n            const b_n = new Array(n + 1).fill(0);\r\n            \r\n            // (2n-1) * B_{n-1}(s)\r\n            for (let i = 0; i < b_n_minus_1.length; i++) {\r\n                b_n[i] += (2 * n - 1) * b_n_minus_1[i];\r\n            }\r\n            \r\n            // s^2 * B_{n-2}(s) - shift by 2 positions\r\n            for (let i = 0; i < b_n_minus_2.length; i++) {\r\n                b_n[i + 2] += b_n_minus_2[i];\r\n            }\r\n            \r\n            b_n_minus_2 = b_n_minus_1;\r\n            b_n_minus_1 = b_n;\r\n        }\r\n        \r\n        return b_n_minus_1;\r\n    }\r\n    \r\n    /**\r\n     * Get recommended filter orders for Bessel filters\r\n     * @returns {Array} Array of recommended orders\r\n     */\r\n    static getRecommendedOrders() {\r\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n    }\r\n    \r\n    /**\r\n     * Calculate group delay for Bessel filter\r\n     * @param {number} order - Filter order\r\n     * @param {number} frequency - Frequency in Hz\r\n     * @param {number} fs - Sampling frequency\r\n     * @returns {number} Group delay in seconds\r\n     */\r\n    static calculateGroupDelay(order, frequency, fs) {\r\n        // Bessel filters have maximally flat group delay\r\n        // The group delay is approximately constant in the passband\r\n        const normalizedFreq = 2 * Math.PI * frequency / fs;\r\n        \r\n        // Simplified group delay calculation\r\n        // In practice, this would be calculated from the filter's phase response\r\n        const groupDelay = order / (2 * Math.PI * frequency);\r\n        \r\n        return Math.max(0, groupDelay);\r\n    }\r\n    \r\n    /**\r\n     * Get Bessel filter characteristics\r\n     * @param {number} order - Filter order\r\n     * @returns {Object} Filter characteristics\r\n     */\r\n    static getCharacteristics(order) {\r\n        const characteristics = {\r\n            1: { groupDelay: 1.0, rolloff: -6, phase: 'Linear' },\r\n            2: { groupDelay: 1.5, rolloff: -12, phase: 'Linear' },\r\n            3: { groupDelay: 2.0, rolloff: -18, phase: 'Linear' },\r\n            4: { groupDelay: 2.5, rolloff: -24, phase: 'Linear' },\r\n            5: { groupDelay: 3.0, rolloff: -30, phase: 'Linear' },\r\n            6: { groupDelay: 3.5, rolloff: -36, phase: 'Linear' },\r\n            7: { groupDelay: 4.0, rolloff: -42, phase: 'Linear' },\r\n            8: { groupDelay: 4.5, rolloff: -48, phase: 'Linear' },\r\n            9: { groupDelay: 5.0, rolloff: -54, phase: 'Linear' },\r\n            10: { groupDelay: 5.5, rolloff: -60, phase: 'Linear' }\r\n        };\r\n        \r\n        return characteristics[order] || { groupDelay: order * 0.5, rolloff: -6 * order, phase: 'Linear' };\r\n    }\r\n}\r\n","// iir.js — Infinite Impulse Response filter design\r\n// Author: Davit Akobia <dav.akobia@gmail.com>\r\n// License: MIT\r\n\r\nimport { ComplexNum as C } from './complex.js';\r\nimport { Util } from './utils.js';\r\nimport { FIRDesigner } from './fir.js';\r\nimport { BaseIIRFilter } from './base-iir-filter.js';\r\nimport { ButterworthFilter } from './butterworth-filter.js';\r\nimport { ChebyshevFilter } from './chebyshev-filter.js';\r\nimport { ChebyshevType2Filter } from './chebyshev-type2-filter.js';\r\nimport { LinkwitzRileyFilter } from './linkwitz-riley-filter.js';\r\nimport { EllipticFilter } from './elliptic-filter.js';\r\nimport { BesselFilter } from './bessel-filter.js';\r\n\r\n/**\r\n * @typedef {\"lowpass\"|\"highpass\"|\"bandpass\"|\"bandstop\"} FiltKind\r\n * @typedef {{b:number[], a:[number, number, number]}} Biquad // a = [1,a1,a2] (digital biquad)\r\n */\r\n\r\n/**\r\n * IIR filter designer (Butterworth, Chebyshev-I, Chebyshev-II, Linkwitz–Riley)\r\n * \r\n * This class provides a unified interface for IIR filter design by delegating\r\n * to specialized filter classes. It focuses on orchestration rather than\r\n * implementing specific filter algorithms.\r\n */\r\nexport class IIRDesigner {\r\n  // ----------------------------- Filter Design Orchestration -----------------------------\r\n\r\n  /**\r\n   * Builds filter from normalized prototype poles using proper analog transforms,\r\n   * then bilinear; normalize digitally at z0 (DC for LP, Nyquist for HP).\r\n   * Delegates to BaseIIRFilter.fromPrototype for consistency.\r\n   * \r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {C[]} polesNorm - Normalized poles\r\n   * @param {number} normalizeAt - Normalization point (1 for LP, -1 for HP)\r\n   * @param {number} wc - Cutoff frequency in rad/s\r\n   * @returns {{b: number[], a: number[], sections: Biquad[]}} Filter coefficients and sections\r\n   */\r\n  static fromPrototype(kind, fs, polesNorm, normalizeAt, wc) {\r\n    return BaseIIRFilter.fromPrototype(kind, fs, polesNorm, normalizeAt, wc);\r\n  }\r\n\r\n  // ----------------------------- Public Filter Design Interface -----------------------------\r\n\r\n  /**\r\n   * Designs a Butterworth filter\r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @returns {{b: number[], a: number[], sections: Biquad[]}} Filter coefficients and sections\r\n   */\r\n  static butterworth(kind, cutoffHz, fs, order) {\r\n    return ButterworthFilter.design(kind, cutoffHz, fs, order);\r\n  }\r\n\r\n  /**\r\n   * Designs a Chebyshev Type 1 filter\r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @param {number} rp - Passband ripple in dB\r\n   * @returns {{b: number[], a: number[], sections: Biquad[]}} Filter coefficients and sections\r\n   */\r\n  static cheby1(kind, cutoffHz, fs, order, rp = 1) {\r\n    return ChebyshevFilter.design(kind, cutoffHz, fs, order, rp);\r\n  }\r\n\r\n  /**\r\n   * Designs a Chebyshev Type 2 filter\r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @param {number} rs - Stopband attenuation in dB\r\n   * @returns {{b: number[], a: number[], sections: Biquad[]}} Filter coefficients and sections\r\n   */\r\n  static cheby2(kind, cutoffHz, fs, order, rs = 40) {\r\n    return ChebyshevType2Filter.design(kind, cutoffHz, fs, order, rs);\r\n  }\r\n\r\n  /**\r\n   * Designs a Linkwitz-Riley filter\r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} orderEven - Filter order (must be even)\r\n   * @returns {{b: number[], a: number[], sections: Biquad[]}} Filter coefficients and sections\r\n   */\r\n  static linkwitzRiley(kind, cutoffHz, fs, orderEven = 4) {\r\n    return LinkwitzRileyFilter.design(kind, cutoffHz, fs, orderEven);\r\n  }\r\n\r\n  /**\r\n   * Designs an Elliptic (Cauer) filter\r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @param {number} rp - Passband ripple in dB\r\n   * @param {number} rs - Stopband attenuation in dB\r\n   * @returns {{b: number[], a: number[], sections: Biquad[]}} Filter coefficients and sections\r\n   */\r\n  static elliptic(kind, cutoffHz, fs, order, rp = 1, rs = 40) {\r\n    return EllipticFilter.design(kind, cutoffHz, fs, order, rp, rs);\r\n  }\r\n\r\n  /**\r\n   * Designs a Bessel filter\r\n   * @param {FilterKind} kind - Filter type\r\n   * @param {number|number[]} cutoffHz - Cutoff frequency(ies)\r\n   * @param {number} fs - Sampling frequency\r\n   * @param {number} order - Filter order\r\n   * @returns {{b: number[], a: number[], sections: Biquad[]}} Filter coefficients and sections\r\n   */\r\n  static bessel(kind, cutoffHz, fs, order) {\r\n    return BesselFilter.design(kind, cutoffHz, fs, order);\r\n  }\r\n}\r\n"],"names":["Util","C"],"mappings":"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"}